Equigini – Software Requirements Specification Document
Page 1 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Software Requirements Specification (SRS)
Equigini Investment Platform v2.0
Developed by Pantomath Capital Advisors Pvt. Ltd.
Prepared by:
Ruskin Felix Barar
(Vice President – IB – Pantomath)
Equigini – Software Requirements Specification Document
Page 2 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Table of Contents
1. Introduction...........................................................................................................................................................................................................5
1.1 Purpose of the Document..............................................................................................................................................................................5
1.2 Scope of the Platform....................................................................................................................................................................................5
1.3 Intended Audience ........................................................................................................................................................................................6
1.4 Definitions and Abbreviations........................................................................................................................................................................7
1.5 References.....................................................................................................................................................................................................8
2. Overall Description ................................................................................................................................................................................................9
2.2 Product Functions Overview..........................................................................................................................................................................9
2.3 User Classes and Characteristics..................................................................................................................................................................12
2.4 Operating Environment ...............................................................................................................................................................................15
2.4.1 Client Environment.............................................................................................................................................................................15
2.4.2 Server-Side Environment ....................................................................................................................................................................16
2.4.3 Subdomain & Domain Structure.........................................................................................................................................................16
2.4.4 Third-Party Integrations......................................................................................................................................................................17
2.4.5 Performance and Availability Targets..................................................................................................................................................17
2.5 Constraints...................................................................................................................................................................................................18
2.5.1 Functional Constraints........................................................................................................................................................................18
2.5.2 Technical Constraints..........................................................................................................................................................................18
2.5.3 Compliance and Security Constraints .................................................................................................................................................19
2.5.4 Operational Constraints......................................................................................................................................................................19
2.6 Assumptions and Dependencies..................................................................................................................................................................20
2.6.1 Assumptions.......................................................................................................................................................................................20
2.6.2 Dependencies.....................................................................................................................................................................................21
3. System Features ..................................................................................................................................................................................................22
3.1 Investor Onboarding & Registration ............................................................................................................................................................22
3.2 Deal Discovery & Interaction .......................................................................................................................................................................26
3.3 Expression of Interest (EOI) & RM Workflow ...............................................................................................................................................28
3.4 Collateral & Document Access.....................................................................................................................................................................30
3.5 Investor Analytics Dashboard ......................................................................................................................................................................33
4. Backend, CMS & Admin Panel .............................................................................................................................................................................36
4.1 Admin Deal Upload System .........................................................................................................................................................................36
4.2 CMS for Blog & Static Content.....................................................................................................................................................................40
4.3 Docx to JSON Upload via Mammoth.js ........................................................................................................................................................44
4.4 Sitemap & SEO Meta Updates.....................................................................................................................................................................48
5. Marketing Automation & Content Infrastructure ................................................................................................................................................52
5.1 Blog Publishing Engine.................................................................................................................................................................................52
Equigini – Software Requirements Specification Document
Page 3 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
5.2 SEO Setup: Sitemap, Meta, Robots..............................................................................................................................................................55
5.3 Integration with Google Tag Manager, GA4 .................................................................................................................................................58
5.4 Email Campaign Integration (Mailchimp).....................................................................................................................................................59
6. Technical Architecture .........................................................................................................................................................................................60
6.1 Frontend Stack (React + Tailwind CSS).........................................................................................................................................................60
6.2 Backend Stack (Node.js or Flask + MongoDB)..............................................................................................................................................60
6.3 Hosting Environment (AWS) ........................................................................................................................................................................61
6.4 Subdomains Setup.......................................................................................................................................................................................61
6.5 CDN & Asset Optimization ...........................................................................................................................................................................62
7. Database Design & Structure...............................................................................................................................................................................63
7.1 MongoDB Schemas - Investor Profile Schema .............................................................................................................................................63
7.2 MongoDB Schemas - Deal Metadata Schema..............................................................................................................................................65
7.3 MongoDB Schemas - NDA/TOC Document Management............................................................................................................................68
7.4 Document Versioning and Recovery ............................................................................................................................................................71
8. API Design & Webhooks......................................................................................................................................................................................74
8.1 Authentication APIs (OAuth2, JWT).............................................................................................................................................................74
8.2 Investor CRUD APIs......................................................................................................................................................................................74
8.3 Deal Listing & Filtering APIs.........................................................................................................................................................................75
8.4 NDA / EOI Handling APIs..............................................................................................................................................................................75
8.5 Dashboard & Analytics Data APIs.................................................................................................................................................................75
8.6 Webhook Architecture.................................................................................................................................................................................76
8.6.1 Investor Signup Webhook...................................................................................................................................................................76
8.6.2 EOI Submitted Webhook.....................................................................................................................................................................76
8.6.3 Deal Updated Webhook......................................................................................................................................................................77
8.6.4 Document Viewed/Downloaded Webhook ........................................................................................................................................77
8.6.5 CRM Integration Hooks.......................................................................................................................................................................77
9. Legal & Compliance Workflow.............................................................................................................................................................................78
9.1 NDA Automation with DocuSign..................................................................................................................................................................78
9.2 TOC Signing and Archiving ...........................................................................................................................................................................79
9.3 Audit Trail and Role-Based Permissions.......................................................................................................................................................79
9.4 Legal Document Recovery Protocol .............................................................................................................................................................80
10. Mobile Responsiveness & UX Design.................................................................................................................................................................81
10.1 UI/UX Principles.........................................................................................................................................................................................81
10.2 Mobile-first Wireframes ............................................................................................................................................................................82
10.3 Swipe and Interaction Standards...............................................................................................................................................................82
11. Analytics & Monitoring......................................................................................................................................................................................83
11.1 Google Analytics 4 Tracking .......................................................................................................................................................................83
11.2 Funnel Drop-Off & Event Tagging...............................................................................................................................................................84
11.3 Hotjar / Microsoft Clarity Heatmaps..........................................................................................................................................................84
11.4 Admin Monitoring Dashboard ...................................................................................................................................................................85
Equigini – Software Requirements Specification Document
Page 4 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
11.5 CRM Integration Metrics (Zoho) ................................................................................................................................................................86
12. Non-Functional Requirements...........................................................................................................................................................................87
12.1 Performance & Scalability..........................................................................................................................................................................87
12.2 Security & Data Protection ........................................................................................................................................................................87
12.3 Backup and Recovery.................................................................................................................................................................................88
12.4 Compatibility .............................................................................................................................................................................................88
12.5 Usability & Accessibility .............................................................................................................................................................................89
13. Development, Deployment & CI/CD..................................................................................................................................................................90
13.1 GitHub Repository Structure......................................................................................................................................................................90
13.2 CI/CD Pipeline............................................................................................................................................................................................91
13.3 Branching Strategy.....................................................................................................................................................................................92
13.4 Server Deployment & Logs........................................................................................................................................................................92
14. Testing Strategy .................................................................................................................................................................................................94
14.1 Unit Testing................................................................................................................................................................................................94
14.2 Integration Testing.....................................................................................................................................................................................95
14.3 UAT Process (User Acceptance Testing) .....................................................................................................................................................96
14.4 Performance Testing ..................................................................................................................................................................................96
14.5 Mobile and Cross-Browser Testing.............................................................................................................................................................97
15. Roadmap and Phases ........................................................................................................................................................................................98
15.1 Phase 1 – Core Platform Delivery...............................................................................................................................................................98
15.2 Future Enhancements................................................................................................................................................................................99
16. Appendix ......................................................................................................................................................................................................... 100
16.1 Sample NDA & TOC Templates................................................................................................................................................................. 100
16.2 Sitemap Structure (Post).......................................................................................................................................................................... 101
16.3 Example API Response Structures............................................................................................................................................................ 102
16.4 Docx to JSON Conversion Sample ............................................................................................................................................................ 104
16.5 Investor Persona Mock Profiles................................................................................................................................................................ 105
16.6 Webhook Documentation Examples........................................................................................................................................................ 105
Equigini – Software Requirements Specification Document
Page 5 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
1. Introduction
This document outlines the Software Requirements Specification (SRS) for the Equigini
Investment Platform, a curated digital ecosystem developed by Pantomath Capital Advisors Pvt.
Ltd.. The document details the system's goals, user roles, functional and technical specifications,
and integration layers. It serves as the foundational reference for all product, engineering, legal,
and operations teams involved in the development and deployment of the Equigini platform.
1.1 Purpose of the Document
The purpose of this document is to provide a comprehensive specification for the design,
development, testing, and deployment of the Equigini platform. It:
• Defines the functional and non-functional requirements of the system
• Specifies user roles, system features, APIs, UI/UX logic, and legal workflows
• Acts as a reference for development, QA, DevOps, design, and legal teams
• Ensures clarity and traceability across project stages and technical ownership
• Forms the basis for validation, compliance, and audit readiness
1.2 Scope of the Platform
Equigini is a secure, invite-only private investment platform designed to enable qualified
investors to discover, evaluate, and engage with curated deal opportunities. The scope of the
platform includes:
• User management for different roles: investors, analysts, admins
• Deal discovery and filtering with access controls gated by NDA
• Document workflows including NDA, LOI, and TOC signing via DocuSign
• Expression of Interest (EOI) submission and backend assignment flows
• Admin panel and CMS for deal uploads, blog publishing, and content management
• Analytics, heatmaps, and CRM sync for monitoring investor behavior
• Automated SEO, sitemap updates, webhook integrations
• Mobile-responsive design, backed by a modern frontend and scalable backend
• Hosting, deployment, and CI/CD pipeline integration with GitHub and AWS
This document excludes Phase 2 features such as smart matching algorithms and syndication
tools, which will be covered in future enhancements.
Equigini – Software Requirements Specification Document
Page 6 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
1.3 Intended Audience
This document is intended for the following stakeholder groups:
Role Purpose
Development Team To implement platform logic, APIs, and workflows as per specs
Product & Strategy Leads To align business objectives with feature delivery
Designers (UI/UX) To ensure user experience aligns with access rules and
component logic
Quality Assurance (QA) To validate functionality, coverage, and test case alignment
DevOps & Infrastructure To configure deployment pipelines and hosting environments
Legal & Compliance To verify that document workflows and storage comply with
institutional norms
CRM & Marketing
Automation
To connect event flows, lead data, and email triggers
Senior Management For status tracking, risk mitigation, and compliance assurance
Equigini – Software Requirements Specification Document
Page 7 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
1.4 Definitions and Abbreviations
Term Definition
SRS Software Requirements Specification
NDA Non-Disclosure Agreement
TOC Terms of Commitment
LOI Letter of Intent
EOI Expression of Interest
CMS Content Management System
GTM Google Tag Manager
GA4 Google Analytics 4
JWT JSON Web Token
CRM Customer Relationship Management (Zoho)
API Application Programming Interface
CI/CD Continuous Integration / Continuous Deployment
UAT User Acceptance Testing
MongoDB Document-based NoSQL Database
DocuSign eSignature platform for digital legal document execution
Hotjar / Clarity User behavior analytics and session heatmap tools
Equigini – Software Requirements Specification Document
Page 8 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
1.5 References
Reference Description
DocuSign API Documentation For configuring NDA/TOC flows
Zoho CRM API Documentation For lead and activity synchronization
Mammoth.js Library Used for .docx to JSON conversion in blog CMS
Google Analytics 4 (GA4) Event and user activity tracking
Google Tag Manager (GTM) Event injection and funnel monitoring
MongoDB Schema Design For managing investor, deal, and document records
OpenAPI / Swagger API standardization and documentation
Equigini – Software Requirements Specification Document
Page 9 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
2. Overall Description
2.1 Product Perspective
The Equigini Investment Platform is a secure, web-based application developed by Pantomath
Capital Advisors Pvt. Ltd. to enable curated access to private investment opportunities for
qualified individual investors. It is designed as a closed-loop, invite-only platform that facilitates
the discovery, evaluation, and onboarding of investment deals with integrated compliance
workflows.
This platform is not intended for open public access, and all participation is based on internal
invitation and verification. Unlike crowdfunding platforms or open deal syndicates, Equigini
focuses on structured, compliance-led dealmaking — reflecting the institutional rigor of
Pantomath’s investment banking practice.
2.2 Product Functions Overview
System Architecture Overview
Layer Stack Notes
Frontend React.js + Tailwind CSS Mobile-first, PWA-ready design for
investor platform and public site
Backend Node.js or Flask +
MongoDB
API-driven microservice logic, secure
document handling
Hosting AWS / Vercel / DigitalOcean Cloud-based deployment with GitHubmanaged CI/CD
CMS Layer React Admin Panel Used by Pantomath team to manage
deals, investors, and blogs
Subdomains
• app.equigini.com — Investor portal
• backend.equigini.com — Internal
CMS for admin/analyst
• equigini.com — Public-facing
content website
Document Management Native + Third-party APIs
(Leegality / DocuSign)
Signed NDAs, LOIs, and TOCs are stored
in versioned document repositories
Equigini – Software Requirements Specification Document
Page 10 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Platform Modules and Functional Scope
Module Description Access Level
Investor Registration
& Onboarding
Investors may register either through a private invite or via the public site. All
registrations are subject to internal review and approval by the platform
administrator. Until approval, access is restricted.
Public
(Restricted PostLogin)
Investor Verification &
Role Assignment
Admin manually reviews and approves investor profiles based on internal
criteria. Upon approval, the investor role is upgraded to allow interaction with
the deal interface.
Admin
Deal Listing Feed
(Restricted Access)
The general list of deals is visible to all logged-in users; however, individual
deal pages remain inaccessible until verification and NDA signing.
Verified
Investors Only
Dynamic NDA
Workflow
Once approved, investors are prompted to sign a dynamic NDA, prefilled with
their details. NDA signing is mandatory before viewing any deal-specific
documents.
Verified
Investors
Secured Document
Vault
After NDA completion, investors may access deal-specific documents (IMs,
pitch decks, financials) in a watermarked, read-only or download-controlled
environment.
Verified
Investors (PostNDA)
Expression of Interest
(EOI) Submission
Verified investors may submit EOIs through dynamic forms tied to specific
deals. All submitted EOIs are logged and visible to platform administrators.
Verified
Investors
EOI Review and
Analyst Assignment
Admin reviews EOI submissions and assigns relevant deals to the internal
analyst for further evaluation and document flow management.
Admin
Analyst Workspace The analyst accesses only those deals assigned to them by the admin. The
workspace enables review of investor documentation, status tracking, and
preparation of agreements (e.g., LOI, TOC).
Analyst
Legal Document
Handling (LOI, TOC,
etc.)
Post-EOI, the analyst initiates contract generation (LOI/TOC) using preapproved templates. Signed versions are securely stored and versioncontrolled.
Analyst &
Investor
Blog & Content
Publishing Engine
Admin users can publish thought-leadership content or updates via either
structured field entry or uploading .docx files, which are parsed into structured
blog content using a document-to-JSON parser.
Admin
Sitemap & SEO
Automation
Following content publication, the sitemap is automatically updated and
submitted to search engines to ensure visibility and compliance with SEO
protocols.
Admin
Platform Usage
Monitoring
The admin panel includes an internal dashboard to monitor investor behavior,
deal views, NDA completions, and platform engagement.
Admin
Analytics Dashboard
(Phase 2)
Advanced metrics dashboard to visualize the investor funnel, engagement
drop-offs, deal conversion ratios, and behavioral insights.
Admin & Analyst
AI-Based Notifications
& Nudges (Phase 2)
A logic-based recommendation engine that sends timely alerts and nudges to
investors based on behavior, profile preferences, and deal activity.
Verified
Investors
Equigini – Software Requirements Specification Document
Page 11 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Investor Access Control Summary
Access Level Description
Unverified
Investor
Can register and log in to the platform but has no access to individual deal
pages or documents. Visible interface is limited to basic platform layout and
informational sections.
Verified
Investor
Gains access to individual deals, dynamic NDA signing, and post-verification
functionalities including EOI submission and document downloads.
Admin Full access rights, including user management, deal uploads, blog publishing,
system configuration, and analytics.
Analyst Restricted access limited to deals assigned by admin. Can view investor EOIs,
manage compliance workflows, and upload signed agreements. Does not
access broader platform management functions.
This perspective outlines Equigini as a compliance-first, investor-gated, and institutionallycurated digital platform, equipped to scale private investment discovery and engagement in a
structured and measurable way.
Equigini – Software Requirements Specification Document
Page 12 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
2.3 User Classes and Characteristics
User Role Definitions
User Class Description Access
Level
System Functions
Public User
(Unregistered)
Any user accessing the publicfacing marketing website without
registration.
No
platform
access
Can browse static site content,
SEO blogs, and public FAQs. No
platform login or investment
access.
Investor –
Registered
(Unverified)
A user who has registered via the
public platform or an invitation
link but has not yet been
approved by the admin.
Limited
Access
Can log in and view the
dashboard UI, deal list preview
(without content access), and
account settings. Cannot access
individual deals or submit EOIs.
Investor –
Verified
A registered investor whose
profile has been reviewed and
approved by the admin.
Verification may include PANbased validation, investor type
classification, and risk profiling.
Full
Investor
Access
Can access full deal pages, sign
NDAs, view secured documents,
submit EOIs, and receive
notifications. Eligible to receive
smart nudges (Phase 2).
Admin (Internal
Platform
Administrator)
Designated member from the
Pantomath internal team
responsible for overall system
configuration, user approvals,
deal uploads, and analytics
monitoring.
Full Access Can manage user roles, assign
deals to analysts, upload and
manage deals and documents,
publish blogs, monitor KPIs, and
control SEO tools (sitemap,
metadata).
Analyst A single internal analyst who is
assigned deals by the admin after
an investor submits an EOI. The
analyst handles documentation,
compliance workflows, and final
agreement preparation.
Restricted
Access
Can access only the assigned
deals, review EOIs, upload and
archive signed agreements
(LOI/TOC), and support
compliance processing. No
access to broader user or
system configuration.
Equigini – Software Requirements Specification Document
Page 13 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Access Privileges by Role
Feature / Module Public
User
Investor
(Unverified)
Investor
(Verified)
Admin Analyst
Platform Login ✖ ✔ ✔ ✔ ✔
View Deal Listing
Page
✖ ✔ (Title-only) ✔ ✔ ✔ (Assigned
only)
Access Deal Detail ✖ ✖ ✔ ✔ ✔ (Assigned
only)
Sign NDA ✖ ✖ ✔ ✔ (View
NDA Status)
✔ (Audit
Status)
Access Documents ✖ ✖ ✔ (PostNDA)
✔ ✔
Submit EOI ✖ ✖ ✔ ✔ (View All
EOIs)
✔ (Assigned
Deals)
Upload Deals ✖ ✖ ✖ ✔ ✖
Manage Users ✖ ✖ ✖ ✔ ✖
Assign Deals to
Analyst
✖ ✖ ✖ ✔ ✖
Upload & Manage
Legal Documents
✖ ✖ ✖ ✔ ✔
Access Platform
Analytics
✖ ✖ ✖ ✔ ✔ (Phase 2
only)
Publish Blog /
Content
✖ ✖ ✖ ✔ ✖
Equigini – Software Requirements Specification Document
Page 14 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
User State Transitions
From To Trigger / Action
Public User Investor – Registered Completion of signup form on the platform
Investor –
Registered
Investor – Verified Admin reviews and approves the user
profile
Investor – Verified (Access to
deals/documents)
Post-NDA signature; system upgrades
access
Any Investor Deactivated Manual action by admin or due to
inactivity/fraud
This classification ensures that platform interactions remain streamlined, secure, and aligned
with compliance objectives. The use of a tightly scoped analyst role and centralized
administrative control minimizes operational risk while supporting scale.
Equigini – Software Requirements Specification Document
Page 15 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
2.4 Operating Environment
The Equigini platform is designed to operate within a modern, scalable, and secure cloud-based
environment. The system architecture is built with a modular frontend-backend separation and
optimized for both desktop and mobile usage, ensuring maximum accessibility and performance
across user devices.
All components of the system are designed to support continuous integration and deployment,
high availability, and data integrity. The platform also integrates with third-party tools for
compliance, analytics, document signing, and marketing automation.
2.4.1 Client Environment
The platform is optimized to support all standard, modern web environments used by target
users, including high-net-worth individuals and professional investors.
Parameter Specification
Supported Browsers Google Chrome (v95+), Safari (v14+), Microsoft Edge (v95+),
Firefox (v95+)
Mobile Support Fully mobile responsive; optimized for iOS Safari and Android
Chrome
Device Compatibility Desktop, laptop, tablet, smartphone
Screen Resolution Responsive design across 320px to 1920px widths
Progressive Web App
(PWA)
Planned in Phase 2 for enhanced mobile UX and offline access
Equigini – Software Requirements Specification Document
Page 16 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
2.4.2 Server-Side Environment
The backend of the Equigini platform operates in a cloud-hosted environment and utilizes
scalable application components to support dynamic workflows, document handling, and
database operations.
Parameter Specification
Application Server Flask or Node.js API server
Web Server Nginx or equivalent (reverse proxy configuration)
Database Server MongoDB (document-based NoSQL database)
Hosting Environment AWS EC2 / Lightsail or DigitalOcean droplet
Backup Protocol Daily automated snapshots, point-in-time recovery
CI/CD Deployment GitHub-integrated CI/CD pipeline; deploys to AWS/Vercel
CDN Cloudflare or equivalent for asset optimization and faster delivery
2.4.3 Subdomain & Domain Structure
The Equigini platform is deployed on subdomains to isolate core environments and streamline
access controls.
Environment Domain Purpose
Public Website equigini.com SEO-focused content site, blog, and landing
pages
Investor Platform app.equigini.com Primary interface for investors (registration,
NDA, deal discovery)
Admin & Analyst
Portal
backend.equigini.com Admin dashboard, analyst workspace, content
management
Equigini – Software Requirements Specification Document
Page 17 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
2.4.4 Third-Party Integrations
The system includes integration with several third-party APIs and platforms, critical to legal
compliance, analytics, and workflow automation.
Integration Area Tool/Service Purpose
Document Signing DocuSign e-NDA and LOI/TOC execution with
audit trail
Content Upload
Parsing
Mammoth.js Converts uploaded .docx to
JSON/blog format
Analytics &
Monitoring
Google Analytics 4, Hotjar,
Microsoft Clarity
Track page views, user behavior,
funnel drop-offs
CRM Zoho CRM Optional integration for investor
tracking, lead scoring
Email Automation Mailchimp Drip campaigns, alerts, onboarding
communication
Sitemap/SEO
Management
Dynamic Sitemap Generator +
Meta Tag Modules
Automated sitemap update and
SEO compliance
2.4.5 Performance and Availability Targets
Metric Target
Uptime SLA ≥ 99.5% monthly uptime
Page Load Time < 0.5 seconds (average across devices)
API Response Time < 500 ms (standard endpoints)
Daily Backup Frequency Once every 24 hours
Auto-Scaling Readiness Support vertical scaling or container-based horizontal scale
This operating environment ensures that the Equigini platform remains robust, scalable, and
accessible to investors across geographies and devices, while remaining aligned with
performance and compliance benchmarks.
Equigini – Software Requirements Specification Document
Page 18 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
2.5 Constraints
The Equigini platform, by virtue of its regulatory sensitivity, institutional focus, and technical
architecture, is subject to several functional, operational, and compliance-related constraints.
These constraints must be considered throughout the development, deployment, and ongoing
maintenance lifecycle to ensure platform stability, investor confidence, and regulatory
alignment.
2.5.1 Functional Constraints
Constraint Description
Restricted Deal
Access
Deal-specific pages and documents are locked behind verification and NDA
signing. Access must be programmatically restricted for unverified or noncompliant users.
Single Analyst
Workflow
Only one designated analyst handles deal-specific workflows post-EOI. System
logic must prevent parallel processing of the same deal by multiple analysts.
Manual Investor
Approval
Investor profiles must be manually reviewed and approved by the admin before
gaining access to sensitive areas of the platform. No auto-verification is
permitted.
Static Role
Assignments
User roles cannot be altered automatically by system logic (e.g., based on
activity); changes must be explicitly triggered by the admin.
2.5.2 Technical Constraints
Constraint Description
Document Parsing
Format
The blog publishing system accepts .docx format only for automated parsing
(via Mammoth.js). Other formats must be manually handled.
Non-relational
Database
MongoDB (document-based) is used as the core database, limiting use of
relational joins and requiring denormalized schema design.
CI/CD Only via GitHub All production updates must flow through the GitHub repository, subject to
review and testing. No direct server-level deployments are permitted.
Real-Time
Collaboration Excluded
The platform does not support multi-user collaborative editing or real-time
chat within the current roadmap.
Equigini – Software Requirements Specification Document
Page 19 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
2.5.3 Compliance and Security Constraints
Constraint Description
Mandatory NDA
Workflow
NDA signing must be completed before any deal access is granted. The
system must enforce access gating strictly at the API and frontend levels.
Signed Document
Archival
All signed NDAs, LOIs, and TOCs must be stored in a version-controlled,
tamper-proof document repository within the platform database.
Audit Trails for Legal
Artifacts
All document generation and signing activities must be logged with
timestamps, user identity, and action metadata for auditability.
No Direct Investor
Communication Channels
The system will not feature any built-in messaging functionality between
investors and analysts. All communication is expected to occur externally.
Data Protection
Compliance
The system must comply with data protection regulations including GDPR
principles (where applicable) and India’s IT Act, with explicit user consent
and data minimization practices.
2.5.4 Operational Constraints
Constraint Description
Manual Deal
Assignment
Admins are solely responsible for assigning deals to the analyst post-EOI
submission. No auto-allocation logic will be used.
Investor
Classification Static
at Entry
Investor type (HNWI, Family Office, Angel, etc.) is captured at onboarding and
not dynamically modified unless explicitly done by admin.
Third-Party API
Dependency
Document signing workflows depend on uptime and SLA adherence of thirdparty APIs (Leegality/DocuSign). Fallback workflows must be manually
triggered in case of API failure.
No Self-Service
Deactivation
Investors cannot self-deactivate their profiles. This is an admin-only function
and must be logged accordingly.
These constraints reflect deliberate choices aligned with Pantomath's strategic priorities of
control, compliance, security, and data integrity. All development efforts must incorporate and
preserve these boundaries during implementation and future feature extensions.
Equigini – Software Requirements Specification Document
Page 20 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
2.6 Assumptions and Dependencies
The Equigini platform’s design, implementation, and operational model are based on a set of
foundational assumptions and third-party or organizational dependencies. These assumptions
impact both the technical implementation and the workflow alignment across different teams
(technology, investment banking, compliance, and investor relations).
This section outlines the baseline conditions assumed to be true for the system to function as
intended, and the external/internal systems it relies on for full feature enablement.
2.6.1 Assumptions
Assumption Description
Investor Vetting Is
Centralized
All investor approvals will be performed manually by the internal admin
team. No self-verification or automated approval workflows are planned.
Investor Classification Is
Captured at Onboarding
Data such as investor type (e.g., HNI, Family Office), investment
preferences, geography, and ticket size range will be obtained during
registration and used for segmentation logic.
Investor Consent Will Be
Obtained
All legal and compliance documents, including the NDA and LOI/TOC, will
be acknowledged and signed electronically, and the platform will store
this signed consent securely.
Platform Administrators
Will Manage Content
All deal uploads, document uploads, blog posts, and investor approvals
are assumed to be managed by designated platform administrators only.
No delegation or team-based admin roles are expected.
Only Assigned Analysts
Will Process Deals
The analyst will only view and process deals specifically assigned by the
admin. No cross-functional analyst collaboration is required within the
platform.
Blog Content Will Be
Provided in .docx Format
Content to be uploaded to the blog engine is assumed to be written and
formatted in .docx format, compatible with the Mammoth.js parser.
Document Templates Are
Pre-Approved
NDA, LOI, and TOC templates are assumed to be standardized and preapproved by the legal team. The system will dynamically populate them,
but not edit core legal clauses.
Users Will Engage via
Email-First Channels
Notifications, nudges, and alerts are assumed to be delivered via email
and not through SMS or in-platform messaging (except Phase 2 features
like AI nudging).
Equigini – Software Requirements Specification Document
Page 21 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
2.6.2 Dependencies
Dependency Type Description
DocuSign External API Used for electronic signing of NDAs and legal agreements. The
platform’s compliance workflow relies on the availability and
integration of this service.
MongoDB
Database
Infrastructure All user profiles, deal data, document metadata, and investor
activity logs are stored in a MongoDB instance. Stability and
scalability depend on hosted database environment.
Mammoth.js
Library
Open-Source
Library
Used for converting .docx blog documents to structured
HTML/JSON format for publishing. Required for CMS content
processing.
Google Analytics /
Tag Manager
External Tool Required for tracking user engagement, funnel progression,
and event-level analytics. Tag integration is assumed to be
completed during deployment.
Mailchimp External Tool Used for transactional emails, drip sequences, EOI
confirmations, and alerts. All system notifications depend on
SMTP/email API availability.
Zoho CRM External CRM May be integrated to enrich investor profiles, capture
touchpoints, and route qualified leads. Used primarily by the
admin or investment team if connected.
GitHub Repository Internal
DevOps
CI/CD, versioning, and deployment for frontend and backend
are assumed to be managed through a GitHub repository
controlled by the Pantomath tech team.
Sitemap Update
Utility
Internal
Module
The blog engine and content publishing workflows depend on
the dynamic sitemap generator to ensure SEO compliance
after each new post.
These assumptions and dependencies form the operational baseline for Equigini’s system
functionality. Any deviation from these inputs or integration failures with dependent systems
should trigger predefined fallback mechanisms or manual intervention protocols as outlined in
later sections of this specification.
Equigini – Software Requirements Specification Document
Page 22 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
3. System Features
This section defines the functional requirements of the Equigini platform in detail. Each
subsection corresponds to a specific feature set or workflow module within the system,
outlining:
• The purpose of the feature
• User roles involved
• Key functional components
• Associated business rules
• Inputs and outputs relevant to the module
• Integration or compliance considerations (where applicable)
The features are organized in the same sequence as the typical lifecycle of platform usage —
beginning with onboarding, followed by deal interaction, expression of interest, compliance,
and content delivery.
3.1 Investor Onboarding & Registration
Purpose
To enable new investors to register on the Equigini platform, submit essential profile
information, and be verified by the admin before gaining access to sensitive investment content.
The onboarding workflow ensures that investor access is controlled, segmented, and compliant
with the platform’s invite-only positioning.
Actors Involved
Role Responsibility
Investor
(Unverified)
Completes initial registration form and submits profile for review
Admin Reviews investor information, verifies credentials, assigns access status
System Stores profile data, restricts access until verification, and enforces role
gating
Equigini – Software Requirements Specification Document
Page 23 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Functional Flow
1. Investor Registration
o Users can access the registration form via invite or public URL on
app.equigini.com.
o Required fields include:
▪ Full Name
▪ Email Address (verified)
▪ Mobile Number
▪ Investor Type (HNWI, Family Office, Angel, etc.)
▪ PAN (optional at registration, required for verification)
▪ Geography
▪ Investment Range
▪ Preferred Sectors
▪ Source of Discovery (Referral, LinkedIn, etc.)
2. Email Verification
o A verification email with a one-time link is sent upon submission.
o Email verification is mandatory before progressing to profile review.
3. Profile Review by Admin
o Admin receives alert of a new registration.
o Admin views the profile via backend dashboard, performs manual KYC check
(PAN/investor type validation), and either:
▪ Approves the profile (status changes to Verified)
▪ Keeps it in pending/rejected state
4. Role Update
o Once approved, the user’s role is upgraded to “Verified Investor”.
o Verified investors are granted access to NDA signing and deal pages.
Equigini – Software Requirements Specification Document
Page 24 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
UI/UX Considerations
Interface Description
Registration Form Multi-step or collapsible form design to capture all investor data
cleanly
Success Page Confirmation with message: "Your profile has been submitted. You
will be notified upon approval."
Dashboard for
Unverified Users
Restricted dashboard showing limited components and locked deal
cards
Admin Panel Investor queue with filtering, quick view of key details, and
approve/reject toggle
Business Rules
Rule Description
R1 No investor may access individual deal pages without admin approval and NDA signing.
R2 Duplicate emails are disallowed; email must be unique per investor.
R3 Unverified users remain in read-only mode indefinitely unless manually reviewed.
R4 Email and mobile number verification is mandatory before admin approval.
R5 Investor role cannot be elevated programmatically — only via explicit admin action.
Inputs
• User-submitted registration fields
• Email and mobile data
• Admin validation criteria
Outputs
• Investor record in MongoDB
• Email verification trigger
• Admin notification of new registration
• Updated access status upon approval
Equigini – Software Requirements Specification Document
Page 25 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Integrations
System Function
MongoDB Stores investor profile data with timestamp and verification status
Email Service
(Mailchimp)
Triggers verification emails and approval/rejection notifications
Admin Dashboard Displays queued investor submissions and enables manual
decisioning
This module serves as the entry point for all platform participants and must enforce strict
gating, consistent user experience, and traceable audit logs for every status change.
Equigini – Software Requirements Specification Document
Page 26 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
3.2 Deal Discovery & Interaction
The Deal Discovery module governs how verified investors interact with listed deals on the
Equigini platform. It ensures that only qualified and NDA-approved investors can view dealspecific details, and provides the frontend logic for listing, filtering, and saving investment
opportunities.
Only verified investors who have completed the NDA workflow can access individual deal pages.
The general deal listing interface, however, is visible to all logged-in users (including unverified
users), with deal cards shown in a locked or blurred state to enforce access restrictions.
Actors Involved
• Verified Investor: Can access and interact with deals post-NDA
• Unverified Investor: Can see high-level deal listings but cannot open any individual deal
• Admin: Uploads, edits, and manages deals from the backend
• Analyst: Views only deals assigned after EOI; no interaction at discovery stage
Functional Flow
1. All registered users can access the deal listing screen. For unverified users, deal cards
appear locked with a CTA to complete onboarding and await approval.
2. Verified investors with an active NDA can view deal cards and click through to full detail
pages.
3. Each deal card displays the investment name, sector, stage, ticket size, status
(open/closed), and teaser content.
4. Upon clicking a deal, the investor is taken to the full deal view page with expandable
sections containing:
o Executive Summary
o Investment Thesis
o Sector Overview
o Deal Structure and Ticket Size
o Documents Section (accessible only after NDA)
5. Investors may “Save” or “Bookmark” deals to revisit later (added to a Watchlist).
UI/UX Considerations
• Locked state indicators must clearly show restricted access for unverified users
• Hover and scroll interactions should be optimized for mobile devices
• Deal cards must show key indicators like sector, expected IRR, and ticket range
• Filtering options should include sector, investment stage, geography, and deal status
• Watchlist should be presented in the investor dashboard with sort and filter options
Equigini – Software Requirements Specification Document
Page 27 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Business Rules
• Unverified investors cannot open any individual deal page
• NDA signing is a mandatory prerequisite to accessing any deal documentation
• Deals with a status of “Closed” will be shown as archived and non-clickable
• An investor can only interact with deals while their account remains in a Verified + NDAcomplete state
• Each investor’s interactions (views, saves) are logged and associated with their CRM
profile in Zoho
Inputs
• Investor role and NDA status
• Deal metadata: title, summary, stage, sector, visibility flag
• Filters applied on the UI (stage, sector, ticket size)
Outputs
• Deal list view with restricted/full access depending on user state
• Watchlist view saved to user’s account
• Interaction logs captured for CRM (e.g., “Investor X viewed Deal Y”)
Integrations
• MongoDB: Stores deal content and investor interaction metadata
• Zoho CRM: Logs investor-level interaction events and deal interest
• Frontend API: Controls access to deal details based on user role and NDA flag
This module forms the foundation for investor engagement and is structured to ensure high
usability, compliance gating, and future extensibility into smart matching and behavioral
nudging in Phase 2.
Equigini – Software Requirements Specification Document
Page 28 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
3.3 Expression of Interest (EOI) & RM Workflow
The Expression of Interest (EOI) module allows verified investors who have signed the NDA to
formally indicate interest in a specific deal. This module serves as the first formal trigger in the
investment funnel and initiates the backend workflow that ultimately leads to deal allocation
and analyst engagement.
The EOI process is designed to capture investor preferences, intent, and eligibility for a specific
opportunity in a structured format. Once submitted, the EOI is routed to the admin dashboard,
where it can be reviewed, and the relevant deal assigned to the internal analyst for further
processing.
Actors Involved
• Verified Investor: Fills and submits the EOI form
• Admin: Reviews all EOIs and assigns the deal to the analyst
• Analyst: Gains visibility on the assigned deal and initiates further processing
• System: Logs submissions, triggers notifications, and updates investor-deal engagement
records
Functional Flow
1. Investor opens a deal page and clicks “Express Interest”.
2. A dynamic form appears with fields such as:
o Intended Ticket Size
o Strategic Rationale or Comments
o Timeline to Invest
o Preferred Contact Method
3. Upon submission, the system:
o Saves the EOI to the database with timestamp
o Notifies the admin via backend interface and email
o Logs interaction data in the Zoho CRM
4. Admin reviews the EOI and, if approved, assigns the deal to the internal analyst
5. The analyst accesses the assigned deal from their dashboard and begins the compliance
and documentation workflow (e.g., LOI sharing)
Business Rules
• EOIs can only be submitted by verified investors who have signed the NDA
• Each EOI submission must be linked to a specific deal and investor ID
• Investors may submit EOIs for multiple deals independently
• The same deal cannot be assigned to the analyst more than once per investor
• All submissions must be logged and displayed in the admin and analyst panels
Equigini – Software Requirements Specification Document
Page 29 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
UI/UX Considerations
• “Express Interest” CTA should be clearly visible on the deal page
• Form should be user-friendly, mobile-responsive, and context-aware
• After submission, investor receives a confirmation message on-screen and via email
• Dashboard should show “EOI Submitted” badge for relevant deals
Inputs
• Investor profile (ID, role, contact info)
• Deal metadata (deal ID, stage, sector)
• EOI form fields (amount, rationale, timeline)
Outputs
• EOI object saved in MongoDB
• Email notification via Mailchimp to admin
• Zoho CRM activity log (e.g., “Investor X submitted EOI for Deal Y”)
• Admin dashboard record for review and assignment
Integrations
• MongoDB: Stores EOI records with full investor-deal linkage
• Mailchimp: Sends submission and approval notifications
• Zoho CRM: Logs investor activity, deal interests, and relationship events
The EOI module formalizes investor intent, initiates the processing pipeline, and provides a clear
handoff from frontend interest to backend diligence. It is a critical trigger point for downstream
actions including analyst allocation, document sharing, and eventual legal closure.
Equigini – Software Requirements Specification Document
Page 30 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
3.4 Collateral & Document Access
This module governs the secure access and controlled distribution of all investment-related
documents hosted on the Equigini platform, including pitch decks, investment memoranda
(IMs), financial models, and legal agreements such as LOIs and TOCs. The module enforces strict
compliance logic, whereby sensitive documents are only accessible to verified investors who
have completed the NDA signing process via DocuSign. However, each deal includes an initial
teaser document that can be viewed by any registered investor, including those not yet verified
or NDA-approved. Documents are uploaded by the admin and tagged to specific deals. Once the
investor is verified and the NDA is signed, access to the full document room is enabled. All
document access is logged for audit purposes and compliance oversight.
Actors Involved
Role Description
Investor (Unverified) Can view teaser-level documents for all deals
Investor (Verified) Can view teaser documents and, post-NDA, access full collateral
Admin Uploads, updates, and manages all deal documentation
Analyst Views and downloads assigned deal documents post-EOI
System Enforces access logic, applies watermarks, and logs document events
Document Types and Access Rules
Document Type Uploaded
By
Visible To Access
Requirement
Downloadable Logged
Teaser / Deal Snapshot Admin All logged-in
investors
None (login only) Yes (optional) Yes
Pitch Deck Admin Verified Investors,
Analyst
NDA Signed Yes
(Watermarked)
Yes
Investment
Memorandum (IM)
Admin Verified Investors,
Analyst
NDA Signed Yes
(Watermarked)
Yes
Financial Model Admin Verified Investors,
Analyst
NDA Signed Yes (Optional) Yes
Term Sheet / LOI Analyst Specific Investor Admin Assignment
+ NDA
Yes Yes
Other Supporting
Documents
Admin Verified Investors,
Analyst
NDA Signed Yes Yes
Equigini – Software Requirements Specification Document
Page 31 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Functional Flow
Step Action
1 Admin uploads documents via the backend, tagging them to a deal and marking one as
"Teaser".
2 Teaser becomes immediately visible and downloadable to any logged-in investor.
3 Other documents are hidden until NDA signing.
4 Investor signs NDA via DocuSign.
5 System grants full document room access for that deal.
6 Document views and downloads are logged and linked to the user profile and deal ID.
7 Analyst accesses documents post EOI assignment.
UI/UX Considerations
Element Description
Teaser Access Box Always visible; includes teaser file name and download icon
Document Room
Section
Locked for unverified users, unlocks post-NDA automatically
Download Notices Watermark applied dynamically with investor name and
timestamp
Analyst Dashboard Displays assigned deals with access to full document set
Business Rules
Rule
Code
Description
DOC-01 Each deal must have exactly one teaser document marked as publicly accessible
to logged-in users
DOC-02 Full collateral is accessible only after NDA is signed and investor is verified
DOC-03 All document downloads are watermarked and access logged
DOC-04 Analysts can only access documents for assigned deals
DOC-05 Archived documents must be retained with version history
Equigini – Software Requirements Specification Document
Page 32 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Inputs
Field Source
Deal ID Admin upload form
File Upload Admin document manager
Investor Role + NDA Flag User profile (MongoDB)
Analyst Assignment Admin backend action
Outputs
Type Destination
Document Access Log MongoDB (audit records)
Download Record Zoho CRM activity stream
NDA Status Update Session and API state
Email Notification (optional) Mailchimp trigger to admin or investor
Integrations
Integration Purpose
MongoDB Stores all document metadata, access records, and versioning logs
DocuSign Verifies NDA completion and updates document access permissions
Zoho CRM Logs access activities under investor timeline
Mailchimp Sends document access confirmations, if enabled
Performance and Security Standards
Metric Target
Max Load Time (Teaser) < 1.0 seconds
Max Load Time (Full Docs) < 2.0 seconds
Max File Size 25 MB
Accepted Formats PDF, DOCX, PPTX, XLSX
Watermark Format Investor Name + Date/Time Stamp
This module balances the need for early investor engagement (through teaser access) with strict
confidentiality and compliance controls governing full deal documentation.
Equigini – Software Requirements Specification Document
Page 33 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
3.5 Investor Analytics Dashboard
The Investor Analytics Dashboard provides internal visibility to the admin team regarding
platform usage, investor engagement, and deal interaction behavior. This dashboard serves as
the foundation for operational reporting, marketing optimization, investor prioritization, and
funnel efficiency measurement. While investors do not have access to this dashboard, all
relevant events related to their activity are captured and logged automatically for internal
review.
The dashboard consolidates data from multiple sources including the frontend UI, backend API
logs, document access trails, and CRM event tracking. It provides both aggregate and drill-down
level insights based on deal, investor, and activity type.
Actors Involved
Role Description
Admin Primary user of the analytics dashboard; monitors activity and platform health
Analyst May access limited activity reports only for assigned deals (optional scope)
System Collects, stores, and updates activity data in real time
Metrics Tracked
Category KPI Description
Platform Engagement Daily Active Users (DAU) Number of unique users active per day
Monthly Active Users (MAU) Number of unique users active in a month
Session Duration Average time spent per user session
Bounce Rate % of users leaving after first page
Pages per Session Navigation depth per investor visit
Investor Funnel Signups Number of new investor registrations
NDA Completions Total NDAs signed over time
EOIs Submitted Number of EOIs submitted per week/month
Approval-to-Activity Ratio % of approved users engaging with deals
Deal Activity Deal Views Number of times a deal has been opened
Document Access Logs Who viewed or downloaded which document
Watchlist/Add-to-Save How many times a deal was bookmarked
EOI Conversion Rate % of viewers that submit EOIs for a deal
Equigini – Software Requirements Specification Document
Page 34 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Functional Features
Feature Description
Filtering Options Admin can filter data by investor type, date range, geography, deal ID, or
deal stage
Drill-Down Views Click into specific investors or deals to view engagement histories
Export Capability Downloadable reports in CSV or PDF for internal reporting and audit
Time-Based
Graphs
Weekly/monthly trend charts for tracking performance over time
KPI Benchmarks Displays current vs. target values (e.g., DAU goal vs. actual)
UI/UX Considerations
Element Design Note
KPI Tiles Display headline stats (e.g., “235 EOIs Submitted This Month”)
Line/Bar Charts Visualize trend data for traffic, EOI, or session depth
Heatmaps Identify pages or documents with highest engagement
Export Panel Allows PDF or CSV export of filtered dashboard data
Inputs
Source Data Captured
MongoDB User sessions, page visits, document views, form submissions
CRM (Zoho) Status changes, communication history, funnel updates
Frontend API Events Real-time page interactions and clickstream data
Outputs
Output Format
Dashboard Visualization Web-based chart and table views for admins
Weekly Reports Downloadable summaries (CSV or PDF)
CRM Activity Sync Updates Zoho records with summarized activity logs
Equigini – Software Requirements Specification Document
Page 35 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Business Rules
Rule
Code
Description
ANA-01 Only admin users may access platform-wide analytics; analyst view is scoped to
assigned deals
ANA-02 All views, downloads, and interactions must be time-stamped and user-linked
ANA-03 Exported reports must reflect filter settings and record timestamps
ANA-04 CRM and database activity logs must stay synchronized daily or in real-time
This module ensures that internal teams have measurable insight into the performance and
effectiveness of the platform’s investor funnel, allowing informed decision-making across
marketing, investor engagement, and deal optimization workflows.
Equigini – Software Requirements Specification Document
Page 36 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
4. Backend, CMS & Admin Panel
The backend system and administrative control layer of the Equigini platform serve as the
operational command center for all non-investor users. These modules empower the internal
team—primarily the admin and analyst roles—to manage users, upload and organize deal
content, control document distribution, publish SEO content, and maintain the platform’s
regulatory and information architecture.
The backend is exposed through a secure, role-restricted interface accessible via the subdomain
backend.equigini.com. It is built using modern JavaScript frameworks and RESTful APIs, with
data handled through a document-oriented architecture in MongoDB. Every backend action
(including uploads, updates, approvals, and assignments) is logged and audit-tracked for
compliance purposes.
4.1 Admin Deal Upload System
This module enables the admin to upload, manage, and configure investment opportunities that
are listed on the platform. Each deal uploaded through this interface is associated with
metadata, tags, stage indicators, visibility flags, and documents. The uploaded deals then
populate the frontend deal feed on app.equigini.com, where they are visible to investors as per
their access rights.
Actors Involved
Role Description
Admin Uploads and configures all deals and related metadata
System Validates input fields, stores deal information, and controls visibility logic
Verified
Investors
End users who access the uploaded deals based on their role and NDA
status
Equigini – Software Requirements Specification Document
Page 37 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Deal Upload Fields
Field Required Description
Deal Title Yes The name or reference title of the investment
Sector Yes Predefined or tag-based classification (e.g., Fintech, Consumer)
Stage Yes Early, Growth, Debt, Pre-IPO, etc.
Geography Optional Target region(s) for the investment
Ticket Size Range Yes Indicative range (e.g., ₹25L–₹3Cr)
Summary Yes High-level teaser for use in locked view and listing
Full Description Yes Long-form content to be shown post-NDA
Status Yes Open, Closed, Archived
Deal Priority Flag Optional For prioritizing featured deals in frontend feed
Visibility Yes Determines which investor types can view the deal (if segmented)
Teaser Document Upload Yes Publicly accessible teaser (viewable by all logged-in users)
Deal Collateral Upload Yes Documents like pitch deck, IM, and financials (NDA-restricted)
CRM Deal Code (optional) Optional For syncing with Zoho CRM or internal records
Functional Features
Feature Description
Deal Drafting Admin can save a deal in “Draft” mode before publishing
Deal Preview Admin may preview how a deal will appear on the investor
platform
Edit & Version Control Each update is version-tagged for audit traceability
Document Association Admin can tag multiple files to a deal and flag one as teaser
Expiry Automation
(optional)
Admin can set expiry dates for time-sensitive deals
Equigini – Software Requirements Specification Document
Page 38 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Business Rules
Rule
Code
Description
DEAL-01 All deals must have at least one teaser uploaded before being made visible
DEAL-02 Admin can only publish deals after saving mandatory metadata and verifying
documents are attached
DEAL-03 Once a deal is marked "Closed", it becomes non-clickable for investors
DEAL-04 Editing published deals triggers a notification to affected CRM records
DEAL-05 Admin is solely responsible for deal visibility and categorization
Inputs
• Deal metadata form fields
• Uploaded documents
• Tags and sector classifications
• Optional CRM ID references
Outputs
• New deal records stored in MongoDB
• Rendered deal card in frontend listing
• CRM linkage or event logging (e.g., “Deal X published on YYYY-MM-DD”)
• Document indexing for access control
UI/UX Considerations
Interface Component Design Notes
Upload Form Tabbed or multi-step form interface for simplicity
Document Upload
Panel
Drag-and-drop with document-type tagging
Preview Mode Real-time rendering of frontend display for quality check
Deal List View Admin dashboard table view with filterable columns (status, sector,
date)
Equigini – Software Requirements Specification Document
Page 39 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Integrations
System Purpose
MongoDB Primary data storage for deal metadata and documents
Zoho CRM Optional linkage of deals to CRM pipelines or lead flows
Mailchimp Not used in this module directly, but may be linked for announcement triggers
Frontend API Publishes deal metadata and associated access rules to investor-facing portal
The Admin Deal Upload System is critical to maintaining the quality, consistency, and regulatory
compliance of all listed investment opportunities and functions as the core content publishing
workflow within the Equigini platform.
Equigini – Software Requirements Specification Document
Page 40 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
4.2 CMS for Blog & Static Content
The Blog and Static Content Management System (CMS) allows the admin team to manage
Equigini’s thought leadership, investor education, updates, and SEO-optimized content. It is
integrated with the public-facing website hosted at equigini.com and contributes significantly to
domain authority, keyword visibility, and investor trust-building.
The CMS is accessible via the backend interface at backend.equigini.com, with admin-only
access. It supports structured content uploads through both manual entry and automated .docx
file parsing using the Mammoth.js library. All content published through the CMS automatically
triggers updates to the sitemap and metadata to ensure visibility on search engines.
Actors Involved
Role Description
Admin Authors, formats, and publishes all blog and content entries
System Parses .docx files, generates dynamic blog URLs, updates sitemap
Public Visitors Can access published content freely via the marketing website
Content Types Supported
Type Description Access Level
Blog Post Long-form SEO articles related to PE/VC, market
insights, platform strategy
Public
Sector Reports Educational breakdowns and deep dives into
industries (optional PDF download)
Public
Platform
Announcements
Informational updates about Equigini features or
performance
Public
Case Studies & Deal
Spotlights
Summaries of notable investment mandates (if
permitted)
Public (optional
gating)
Static Pages About Us, Disclaimer, Terms of Use, Contact Public
Equigini – Software Requirements Specification Document
Page 41 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Content Upload Workflow
Step Action
1 Admin creates a new blog entry or uploads a .docx file through the backend CMS panel
2 If .docx is uploaded, Mammoth.js parses the content into HTML/JSON structure
3 Admin selects or adds metadata (title, slug, tags, publish date, category)
4 System validates structure and adds content to the blog index
5 System automatically updates sitemap.xml and meta tags for search engine indexing
6 Blog post goes live on equigini.com/blog/<slug>
Upload Fields and Metadata
Field Required Description
Title Yes Displayed as H1 and browser tab title
URL Slug Yes SEO-friendly URL (auto-generated, editable)
Author Optional Optional attribution
Category Yes e.g., Investor Education, Platform Update, Sector Insights
Tags Optional Keyword-based filtering (optional for frontend search)
Meta Description Optional Custom snippet for Google SERPs
Content Body Yes HTML-rendered blog content (manual or parsed from .docx)
Featured Image Optional Banner shown at top of blog (optional upload)
Publish Date Yes Controls frontend visibility and sitemap update
Equigini – Software Requirements Specification Document
Page 42 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Business Rules
Rule
Code
Description
CMS-01 All blog content must be approved and published by an admin role manually
CMS-02 URL slugs must be unique across the platform
CMS-03 Uploaded .docx files must follow the content formatting template to parse
correctly
CMS-04 Each blog post must belong to a category and cannot be published without one
CMS-05 Sitemap and meta tag updates must occur in real-time or during batch publish
action
Inputs
Input Type Source
Structured Form Entry Manual input by admin
.docx File Upload and parsing via Mammoth.js
Metadata Fields Selected via backend dashboard
Outputs
Output Type Destination
Live blog page equigini.com/blog/<slug>
Sitemap.xml entry Auto-updated and submitted to Google Search Console
Meta Tag Injection Injected into <head> for indexing
Internal Preview Mode Available pre-publish to confirm formatting
Equigini – Software Requirements Specification Document
Page 43 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
UI/UX Considerations
Component Description
Rich Text Editor WYSIWYG interface for direct input/editing
Document Parser Interface Drop-zone for .docx with error alerts and preview
Content List Panel Sortable and searchable table of published and draft entries
Preview Button Live-rendered preview of content before publishing
Integrations
Integration Purpose
MongoDB Stores blog content and metadata records
Mammoth.js Parses .docx to clean HTML and JSON for frontend
rendering
Sitemap Generator Updates sitemap.xml automatically upon publish
Google Search Console (manual
link)
Allows submission of updated sitemap post-deployment
The CMS module ensures Equigini maintains a consistent, authoritative digital voice while also
improving discoverability through content-driven inbound marketing and SEO. It is critical to
long-term investor acquisition and engagement.
Equigini – Software Requirements Specification Document
Page 44 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
4.3 Docx to JSON Upload via Mammoth.js
This module enhances the backend CMS by allowing admin users to upload .docx files that are
automatically parsed and mapped into structured blog entries using Mammoth.js. The system
intelligently extracts predefined heading formats and content markers within the .docx file to
auto-populate the backend blog fields such as title, category, tags, and content body.
The objective is to reduce manual entry, streamline the publishing process, and maintain
formatting consistency across all published content.
Actors Involved
Role Description
Admin Uploads .docx files prepared using a pre-defined content template
System Parses and maps content to structured blog schema
Public User Views published blogs on the frontend website
Functional Flow
Step Action
1 Admin uploads a .docx file via the CMS blog panel
2 System parses the document using Mammoth.js to extract content
3 Recognized headings and metadata markers (e.g., “Title:”, “Category:”) are extracted
and mapped
4 Parsed content is previewed in the CMS for admin validation
5 Admin may edit any field manually before publishing
6 Final content is stored in MongoDB and published to equigini.com/blog/<slug> after
confirmation
Equigini – Software Requirements Specification Document
Page 45 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
.docx Template Format and Mapping Rules
The system will recognize specific labels within the .docx file and map them to CMS fields as
follows:
Document
Marker
Expected Format in .docx Mapped CMS Field
Title: Line starting with Title: followed by text Blog Title
Slug: URL slug format (optional; auto-generated if
omitted)
Blog Slug
Author: Author name (optional) Author
Category: Predefined category name Category
Tags: Comma-separated keywords Tags
Meta: 1-2 line summary Meta Description
Content: Everything following this line Blog Body (HTML
formatted)
Example Snippet in .docx File
Title: 5 Key Trends in Private Equity for 2025
Slug: pe-trends-2025
Author: Pantomath Insights
Category: Sector Insights
Tags: PE, trends, 2025, India, deals
Meta: An overview of five key macro and micro trends shaping the private equity space.
Content:
Private equity investors are evolving fast in India...
<rest of content continues here> ( in h1,h2,h3,p,tables and image format)
Equigini – Software Requirements Specification Document
Page 46 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Backend Mapping Logic
Field Extraction Rule
title First instance of Title:
slug Slug line; else auto-generated from title
category Must match predefined categories or show error
tags Split by comma and trimmed
meta_description Extracted from Meta: line
content_html Converted from paragraph structure under Content: section
Business Rules
Rule Code Description
DOCMAP-01 All blog uploads via .docx must follow the approved format template
DOCMAP-02 If any required field is missing (e.g., title or category), system must display an error
DOCMAP-03 Parsed fields may be overridden manually by the admin before final publishing
DOCMAP-04 System must provide preview of parsed content side-by-side with editable form
DOCMAP-05 Final publish must trigger sitemap and SEO updates just like manual entries
Inputs
Input Type Source
.docx File Uploaded by admin using drag-and-drop or file browser
Blog Metadata Markers Text within .docx headings and labeled lines
Content Body Standard paragraphs from the document
Outputs
Output Destination
Parsed blog fields Populated in CMS blog form
Preview blog content HTML-rendered preview panel
MongoDB record Final blog content after publish
SEO Meta + Sitemap Update Injected into public site upon publish
Equigini – Software Requirements Specification Document
Page 47 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
UI/UX Considerations
Component Description
Upload Panel Drag-and-drop or “Browse” button with .docx file validation
Mapping Review Screen Autofilled form with a side-by-side parsed preview
Validation Errors Clear red alerts for missing or invalid metadata
Manual Override All fields editable post-parsing before submission
Technical Integration
Component Purpose
Mammoth.js .docx to HTML/JSON parser
MongoDB Storage of structured blog content
React Form State Real-time population and editing of mapped fields
Sitemap Generator Update triggered post successful blog publishing
This module enables Equigini to maintain content velocity, ensure formatting discipline, and
simplify content creation for the internal team—ultimately contributing to greater organic
discovery and professional positioning.
Equigini – Software Requirements Specification Document
Page 48 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
4.4 Sitemap & SEO Meta Updates
This module ensures that all published content and newly created deal pages on the Equigini
platform are discoverable by search engines. The system automatically manages sitemap.xml
generation and injects relevant <meta> tags into blog pages, static content, and public-facing
URLs hosted at equigini.com.
The sitemap system supports both manual and automated updates to accommodate SEO best
practices, enabling faster indexing of new content by search engines like Google and Bing.
The sitemap is regenerated every two days by a scheduled script and can also be manually
triggered by the admin from the backend interface using a dedicated “Update Sitemap” button.
Actors Involved
Role Description
Admin Can manually trigger sitemap generation via backend
System Runs automated sitemap update script on a 48-hour interval
Search Engines Index the platform’s public-facing pages via submitted sitemap
Public Users Discover and navigate content through improved search engine visibility
Sitemap Structure
URL Type Frequency Priority
Blog Posts (/blog/<slug>) Automatically added upon publishing High
Static Pages (About, Contact, Terms) Manually defined and included Medium
Public Deal Listings (Optional) SEO-safe teaser pages if enabled Medium
Platform Pages (Homepage, Index) Fixed High
Equigini – Software Requirements Specification Document
Page 49 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Meta Tags Injected per Page
Tag Purpose
<title> Sets browser tab name and SERP title
<meta name="description"> Enables custom descriptions in Google search
<meta name="robots"> Controls page indexing behavior
<link rel="canonical"> Prevents duplicate content indexing issues
Functional Flow
Step Action
1 Admin publishes a new blog post or static page
2 System parses page metadata and adds URL to the sitemap queue
3 Every 48 hours, a scheduled script regenerates sitemap.xml using current published
content
4 Admin may also manually trigger an update using the “Update Sitemap” button in
backend
5 Sitemap is hosted at equigini.com/sitemap.xml and auto-submitted to Google/Bing
6 Meta tags are injected into the <head> of every public page during rendering based on
stored metadata
Backend Admin Controls
Feature Description
Update Sitemap
Button
Located in CMS section of backend; triggers script to recompile
sitemap.xml
Last Updated
Timestamp
Displays last sitemap update time
Auto-Run Scheduler Backend cron job to trigger update every 2 days
Error Logging Admin is notified if sitemap generation fails (via alert on dashboard)
Equigini – Software Requirements Specification Document
Page 50 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Business Rules
Rule
Code
Description
SEO-01 All published blog posts must appear in the sitemap within 48 hours or
immediately on manual trigger
SEO-02 Sitemap must always be available at /sitemap.xml in XML-compliant format
SEO-03 Static pages are to be hard-coded into sitemap configuration and not dynamically
removed unless deactivated
SEO-04 Meta titles and descriptions must fall back to defaults if not provided by admin
SEO-05 All new blog slugs must be unique to prevent URL collisions and canonical errors
Inputs
Field Source
Blog metadata (slug, title, publish date) CMS
Static route paths System-defined
Meta tag overrides Admin entries via CMS editor
Outputs
Output Destination
sitemap.xml file Public root (equigini.com/sitemap.xml)
Injected meta tags <head> of each public HTML page
Search engine ping
(optional)
Google Search Console (manual submission or webhook
trigger)
UI/UX Considerations
Component Description
Button Label “Update Sitemap Now” with last-run timestamp below
Alert System Notification message on success or failure of script execution
Scheduled Run Log Optional audit record to confirm automatic runs have occurred
Equigini – Software Requirements Specification Document
Page 51 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Technical Integration
Component Purpose
Sitemap Generator Script Generates valid XML from published content and static routes
CRON Scheduler /
Background Job
Runs every 48 hours automatically
Admin UI Trigger Sends API call to execute script on demand
File Hosting Sitemap stored in publicly accessible /sitemap.xml file
SEO Meta Injection Module Injects meta content during page build/render from blog
metadata in MongoDB
This module is critical for ensuring Equigini’s visibility across organic search channels, enabling
scalable investor discovery through SEO, and maintaining compliance with search indexing
standards.
4.5 Sitemap Auto-update on Content Upload
This submodule refers to the automatic queuing and scheduling of sitemap updates whenever a
new blog post or public-facing page is published via the CMS. As detailed in Section 4.4, every
valid publish action triggers:
• Internal queueing of the new URL into the sitemap generation process
• Auto-inclusion in the next scheduled (every 48 hours) sitemap rebuild
• Optional immediate update if the admin manually uses the "Update Sitemap Now"
button
No separate admin action is required beyond normal publishing. This ensures that the sitemap
remains current without manual oversight, improving SEO responsiveness.
Equigini – Software Requirements Specification Document
Page 52 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
5. Marketing Automation & Content Infrastructure
This section defines the technical infrastructure required to support Equigini’s content-driven
discovery, lead attribution, event tracking, and email automation systems. The scope is limited
to backend, frontend, and API development requirements to ensure that every marketing
workflow—whether triggered by content publication, user activity, or behavioral analytics—is
trackable, extensible, and integration-ready.
The platform will expose webhook endpoints, API triggers, and structured metadata systems to
support SEO optimization, blog publishing, GA4/Tag Manager tagging, and Mailchimp email
event flows.
All business logic and campaign planning will be handled internally by the Pantomath marketing
team and is out of scope for this document.
5.1 Blog Publishing Engine
The blog publishing engine is a core part of Equigini’s inbound marketing and SEO system. The
engine must support automated publishing pipelines (via form or .docx), auto-update relevant
content indexes, generate valid URLs and metadata, and expose required endpoints and triggers
for tracking and attribution.
Functional Requirements
Requirement
ID
Description
BLOG-01 Blog posts must be exposed via REST API for frontend rendering
BLOG-02 Each post must include structured metadata (title, description, canonical
URL, category, tags)
BLOG-03 Auto-generated blog URLs must be unique and SEO-compliant (slug-based)
BLOG-04 Webhooks must be triggered post-publish for sitemap update and analytics
BLOG-05 Admin must be able to save posts as "Draft" or "Published"
Equigini – Software Requirements Specification Document
Page 53 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
API Endpoints
Method Endpoint Description Access
GET /api/blogs Fetch list of published blog posts with pagination
and filters
Public
GET /api/blogs/:slug Fetch individual blog content and metadata Public
POST /api/admin/blogs Create a new blog entry from backend (form or
.docx)
Admin
PUT /api/admin/blogs/:id Edit blog content or metadata Admin
DELETE /api/admin/blogs/:id Archive or remove blog from live view Admin
Webhook Triggers
Event Triggered When Target
BLOG_PUBLISHED A blog is published successfully (manual or
parsed upload)
Sitemap Generator,
Mailchimp, GA4
BLOG_UPDATED A blog post is edited and republished Sitemap Generator
BLOG_DELETED A blog is archived or removed Sitemap Cleaner (optional)
Metadata Structure (JSON)
{
 "title": "Emerging PE Trends in 2025",
 "slug": "pe-trends-2025",
 "category": "Sector Insights",
 "tags": ["private equity", "2025", "India", "deal trends"],
 "meta_description": "Overview of key macro and micro PE trends shaping investment
strategy.",
 "canonical_url": "https://equigini.com/blog/pe-trends-2025",
 "published_at": "2025-04-22T10:30:00Z"
}
Equigini – Software Requirements Specification Document
Page 54 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
SEO-Specific Fields
Field Required Description
slug Yes Auto-generated from title unless overridden
meta_description Yes Injected into <meta name="description"> tag
canonical_url Yes Set in <link rel="canonical"> to avoid duplicates
category Yes Displayed on frontend and used in sitemap grouping
System Behaviors
• Auto-slug generation based on blog title if not manually entered
• All blog metadata is embedded into the HTML head of the rendered blog page
• A publish action calls the sitemap update function and pings any GA/analytics hooks
defined
• A webhook message is sent to subscribed services (Mailchimp, internal listeners) with
the blog slug and metadata payload
Equigini – Software Requirements Specification Document
Page 55 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
5.2 SEO Setup: Sitemap, Meta, Robots
This module specifies the backend architecture, metadata system, and automation workflows
that enable SEO optimization for Equigini’s public-facing website (equigini.com). It ensures that
every content page (blogs, static pages, and optionally, public deal teasers) is properly indexed
and prioritized for organic visibility on search engines.
The platform must provide structured meta tagging, robots.txt control, automated sitemap
generation, and webhook triggers upon new content publication. These tools are designed for
integration with search engines and are not dependent on manual operations by the marketing
team.
Functional Requirements
Requirement
ID
Description
SEO-01 Automatically generate and host a compliant sitemap.xml file from all
published URLs
SEO-02 Inject metadata (<title>, <meta description>, <link rel="canonical">)
dynamically into page headers
SEO-03 Support manual and scheduled sitemap update (covered in Section 4.4)
SEO-04 Generate and serve robots.txt at root level to control crawl behavior
SEO-05 Notify integrated services (e.g., Google Search Console webhook endpoint)
when new URLs go live
Sitemap Endpoint & Structure
File URL Description
sitemap.xml https://equigini.com/sitemap.xml Main sitemap containing blog and static
content URLs
robots.txt https://equigini.com/robots.txt Crawl instructions for search engine bots
Equigini – Software Requirements Specification Document
Page 56 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Sample Sitemap Entry
<url>
 <loc>https://equigini.com/blog/pe-trends-2025</loc>
 <lastmod>2025-04-22</lastmod>
 <changefreq>weekly</changefreq>
 <priority>0.8</priority>
</url>
Robots.txt File Configuration (Example)
User-agent: *
Disallow: /backend/
Disallow: /admin/
Allow: /
Sitemap: https://equigini.com/sitemap.xml
Metadata Schema (Injected in <head>)
Each blog and static page must include the following tags, auto-populated from the CMS/blog
entry:
Tag Value Source Notes
<title> Blog title Required
<meta name="description"> Meta description field Required
<meta name="robots"> "index, follow" or "noindex" Dynamic (optional)
<link rel="canonical"> Canonical URL field Optional (default to slug)
Equigini – Software Requirements Specification Document
Page 57 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Backend Utilities and Scripts
Utility Description
Sitemap Generator Compiles sitemap file on scheduled run or webhook call
Meta Tag Injector Injects SEO metadata into page templates at render time
Sitemap Ping Job Optional webhook to ping Google and Bing upon major updates
Robots.txt Configurator Serves static robots.txt or uses admin-configurable rules (future scope)
Webhooks and Internal Triggers
Event Trigger Destination
SEO_NEW_URL_ADDED On blog/static page publish Sitemap Generator Script
SEO_MANUAL_TRIGGER Admin clicks "Update Sitemap Now" Sitemap + Metadata Refresh
SEO_AUTOMATIC_RUN Every 48 hours Full sitemap regeneration job
API Exposure (Optional)
Method Endpoint Purpose Access
GET /api/sitemap.xml Fetch latest sitemap (internal preview/testing) Admin
POST /api/admin/seo/refreshsitemap
Trigger regeneration manually Admin
GET /api/admin/seo/status Return last run time, number of URLs,
success/failure flag
Admin
System Behavior
• Each publish action queues the content for inclusion in the next sitemap run
• Metadata is fetched from blog object and injected server-side during page rendering
• Manual trigger is accessible via backend CMS dashboard
• No blog post or static page may be published without at least the title and description
fields
This setup ensures full SEO compliance, complete search engine discoverability, and hands-free
indexing of new content — all driven by the development layer.
Equigini – Software Requirements Specification Document
Page 58 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
5.3 Integration with Google Tag Manager, GA4
This module enables platform-wide event tracking, user behavior monitoring, and conversion
funnel analysis using Google Tag Manager (GTM) and Google Analytics 4 (GA4).
Development Requirements
Task Description
GTM Script
Injection
Inject GTM container script in the <head> of all public-facing pages (equigini.com)
Data Layer Events Push standard user interaction events (e.g., page view, CTA click, document download)
into the GTM data layer
GA4 Configuration Link GTM container to the GA4 property via measurement ID
Consent Logic Include basic cookie consent banner with opt-in toggle for analytics
Events to Track via GTM
Event Trigger
page_view On route change or initial load
blog_read On scroll depth ≥50% of blog post
cta_click On any “Express Interest” or “Sign Up” CTA
document_download On teaser or IM file access
eoi_submit On successful submission of an EOI form
Deliverables
• GTM container ID passed via environment variable
• Common GTM-ready dataLayer.push() methods for interaction points
• Consent toggle logic (script inclusion conditional on approval)
Equigini – Software Requirements Specification Document
Page 59 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
5.4 Email Campaign Integration (Mailchimp)
The platform must integrate with Mailchimp to enable automated email workflows triggered by
user actions (e.g., registration, NDA signing, EOI submission).
Development Requirements
Task Description
Mailchimp API Key
Integration
Securely store and use Mailchimp API key via environment config
Webhook Triggers Trigger POST requests to Mailchimp when key user actions occur
Subscriber Data Sync investor data (name, email, status) to designated list/audience
Email Template
Assignment
Pass event metadata to trigger predefined Mailchimp email
journeys (handled in Mailchimp UI)
Webhook Events to Trigger
Event Payload Example
USER_REGISTERED { "email": "john@example.com", "status": "pending_approval" }
NDA_SIGNED { "email": "john@example.com", "status": "nda_complete" }
EOI_SUBMITTED { "email": "john@example.com", "deal_id": "abc123" }
API Endpoint (if internal relay is needed)
Method Endpoint Purpose
POST /api/marketing/mailchimp/trigger Internal endpoint to format and forward
payload to Mailchimp API
These integrations ensure platform events are properly tracked and communicated, enabling
automated, scalable investor engagement workflows through analytics and email.
Equigini – Software Requirements Specification Document
Page 60 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
6. Technical Architecture
The Equigini platform is architected using a modular, service-oriented design. This architecture
allows for separation of concerns between frontend, backend, data storage, and content
delivery layers, ensuring the system is scalable, maintainable, and performance-optimized for
investor-facing workflows. The system is divided across secure subdomains, leverages a modern
JavaScript-based frontend framework, and is backed by an API-driven server with MongoDB as
the primary datastore. Infrastructure is hosted on a cloud-based environment (AWS) with CDN
support for performance and availability.
6.1 Frontend Stack (React + Tailwind CSS)
Component Specification
Framework React.js (v18+)
Styling Tailwind CSS (JIT mode enabled)
Routing React Router DOM (SPA with code-split lazy loading)
State Management Context API + Reducer (scoped), with optional Redux (for dashboard)
Form Handling React Hook Form + Zod/Yup for validation
Rendering Strategy Client-side rendering for dashboard, static pre-rendering for blogs (optional SSR in future)
PWA Ready Optional in Phase 2
The frontend is optimized for responsiveness and accessibility and supports mobile-first layouts
and semantic component structure.
6.2 Backend Stack (Node.js or Flask + MongoDB)
Component Specification
Server Framework Node.js with Express.js (preferred for frontend-heavy APIs) or Flask (Python-based APIs)
Database MongoDB (hosted on Atlas or EC2 with managed backups)
API Design RESTful APIs with route-level middleware for role validation and data sanitization
Authentication JWT-based login and session management
Scheduler Cron jobs (Node Cron / APScheduler) for sitemap auto-refresh, cleanup jobs
Webhooks Internal + external event triggers (Mailchimp, GA4, Zoho CRM)
The backend exposes a layered API interface for all frontend modules, including deal handling,
investor workflows, blog publishing, document access, and webhook events.
Equigini – Software Requirements Specification Document
Page 61 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
6.3 Hosting Environment (AWS)
Layer Hosting Service Description
Web Hosting AWS EC2 or Vercel Frontend application deployment
Backend APIs AWS EC2 (Ubuntu server) Express or Flask application server with NGINX
reverse proxy
Database MongoDB Atlas / EC2
(replica set)
Primary data storage with daily snapshots
Static Assets AWS S3 (optional) Stores deal documents, PDFs, images
Scheduled
Jobs
AWS CloudWatch / PM2 Runs recurring scripts (e.g., sitemap refresh)
SSL/TLS AWS ACM / Let's Encrypt All routes served over HTTPS via NGINX or CDN
All servers must be configured with automated deployment from GitHub CI/CD pipeline.
6.4 Subdomains Setup
The platform uses isolated subdomains to separate frontend usage areas and internal CMS
operations.
Subdomain URL Purpose
Investor
Platform
app.equigini.com Used by registered and verified investors to
interact with deals, documents, and dashboards
Admin + CMS
Portal
backend.equigini.com Restricted access panel for uploading deals,
managing content, reviewing EOIs
Public Website equigini.com Marketing site with SEO blog, public landing pages,
static content
Each subdomain must be served from a separate build environment, sharing core API services
but with different access control layers.
Equigini – Software Requirements Specification Document
Page 62 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
6.5 CDN & Asset Optimization
Component Specification
CDN Provider Cloudflare (preferred) or AWS CloudFront
Purpose Reduce latency for static resources (JS, CSS, images, documents) and
provide DDoS protection
Compression GZIP + Brotli compression enabled
Caching
Strategy
Static assets with content hash stored with max-age=31536000
Lazy Loading Enabled for large sections, document viewers, and images
Image Format WebP preferred for frontend content
Load Balancing Optional multi-zone routing via Cloudflare for geo-resilience
The CDN layer ensures that document downloads, teaser previews, and blog assets are served
efficiently across regions, especially for mobile-first users.
This technical architecture provides the foundational system required to support all platform
modules, maintain compliance, and enable scale-out readiness as platform adoption grows.
Equigini – Software Requirements Specification Document
Page 63 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
7. Database Design & Structure
The Equigini platform is powered by a document-based database architecture using MongoDB,
which supports flexibility, schema-less iteration, and horizontal scalability. The database serves
as the system of record for all entities, including users, deals, documents, blog content, activity
logs, and workflows.
All collections are secured with role-based access at the API level and leverage unique indexing,
schema validation (via Mongoose or Pydantic), and time-stamped audit trails for traceability.
The structure is optimized for investor-deal interaction flows and modular content
management.
The platform must maintain a clear segregation of collections for operational clarity and future
analytics readiness.
7.1 MongoDB Schemas- Investor Profile Schema
Collection Name: investors
This schema stores the profile and engagement metadata for each investor. It powers role
validation, document permissioning, legal automation, personalization, and investor funnel
visibility.
Schema Fields
Field Type Required Description
_id ObjectId Yes MongoDB auto-generated unique identifier
full_name String Yes Investor’s legal name
email String (unique) Yes Unique email used for login and communication
mobile_number String Yes Primary contact number, optional verification
status Enum Yes unverified, pending_review, verified, deactivated
investor_type Enum Yes HNWI, Angel, FamilyOffice, Other
geography String No Investor's region or country of interest
ticket_range Object No Min and max ticket size in INR or USD
preferred_sectors [String] No Investor’s areas of thematic interest
pan_number String No PAN card number for compliance (optional at signup)
nda_signed Boolean Yes Defaults false; set true on successful NDA
nda_signed_at Date No Date/time when NDA was completed
role Enum Yes investor, admin, analyst (default: investor)
created_at Date Yes Timestamp of registration
verified_at Date No Timestamp when profile is verified
last_login_at Date No Updated upon login/session
crm_status_id String No Optional linkage to Zoho CRM
address_line1 String Yes Primary street address
address_line2 String No Apartment, suite, or additional detail
city String Yes City of residence
state String Yes State/Province/Region
postal_code String Yes ZIP/Postal code
country String Yes Country (for legal use in documents)
Equigini – Software Requirements Specification Document
Page 64 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Example Document (Updated)
{
 "_id": "6645bfa9ec0b5671f3d21ca1",
 "full_name": "Aditya Sharma",
 "email": "aditya@example.com",
 "status": "verified",
 "investor_type": "HNWI",
 "ticket_range": { "min": 2500000, "max": 10000000 },
 "preferred_sectors": ["Fintech", "CleanTech"],
 "pan_number": "ABCDE1234F",
 "nda_signed": true,
 "nda_signed_at": "2025-04-20T08:45:00Z",
 "created_at": "2025-04-15T11:30:00Z",
 "verified_at": "2025-04-16T09:00:00Z",
 "role": "investor",
 "address_line1": "Flat No. 10B, Lotus Residency",
 "address_line2": "Sector 5, Near High Street",
 "city": "Mumbai",
 "state": "Maharashtra",
 "postal_code": "400001",
 "country": "India"
}
These address fields are required for all verified investors and will be used in document
generation for legally binding agreements (auto-filled into NDA, LOI, TOC templates).
Equigini – Software Requirements Specification Document
Page 65 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
7.2 MongoDB Schemas- Deal Metadata Schema
The deal metadata schema defines the structure for storing, querying, and rendering
investment opportunities listed on the Equigini platform. Each deal entry includes structured
fields to define its characteristics, control visibility, associate supporting documents, and track
lifecycle status.
This schema is critical for powering the deal discovery engine, investor-deal engagement logs,
analyst workflows, document access control, and dynamic filtering on the frontend.
Collection Name: deals
Schema Fields
Field Type Required Description
_id ObjectId Yes Unique ID for each deal
title String Yes Public-facing deal title
slug String (unique) Yes URL-safe identifier (auto-generated from title or manually set)
summary String Yes Teaser text shown in listing and pre-NDA view
description String (HTML) Yes Full description visible only post-NDA
sector String Yes Sector classification (e.g., Fintech, SaaS)
sub_sector String No Optional granular tag (e.g., Lending, Payments)
stage Enum Yes Early, Growth, Debt, Pre-IPO, etc.
ticket_min Number Yes Minimum ticket size accepted (in INR)
ticket_max Number Yes Maximum ticket size accepted (in INR)
geography String No Region where the investment is focused
status Enum Yes draft, open, closed, archived
visibility Enum Yes all_verified, restricted (future support for role-based access)
priority_flag Boolean No For displaying the deal as “Featured”
teaser_doc_id ObjectId Yes Reference to teaser document (accessible without NDA)
collateral_docs [ObjectId] Yes Array of full documents (IM, pitch deck, model)
created_at Date Yes Timestamp of deal creation
published_at Date No Timestamp when made visible to investors
created_by ObjectId Yes Admin user ID who uploaded the deal
assigned_to ObjectId No Analyst user ID assigned post-EOI (if applicable)
crm_deal_code String No External CRM identifier (Zoho linkage)
Equigini – Software Requirements Specification Document
Page 66 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Document Association Reference
Field Description
teaser_doc_id ID from documents collection (pre-NDA visibility)
collateral_docs Full access docs shown post-NDA, each linked to a document object with
type, title, and URL
Status Flow Logic
Status Transition Logic
draft Initial state, not shown to investors
open Actively visible to verified + NDA-complete investors
closed Viewable as archived but not eligible for new EOIs
archived Fully hidden from frontend, retained for audit/log
Indexing Requirements
Index Purpose
slug Fast lookup for URL rendering
sector + stage + status Used in investor filtering
status + published_at For displaying active/archived deals
priority_flag For promoting featured deals in feed
Equigini – Software Requirements Specification Document
Page 67 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Example Document
{
 "_id": "665f1a7d1b4c234acda1289b",
 "title": "Series A Investment in ZappyPay",
 "slug": "zappypay-series-a",
 "summary": "Fintech firm raising ₹15Cr in structured round",
 "description": "<p>ZappyPay enables digital lending via embedded finance APIs...</p>",
 "sector": "Fintech",
 "stage": "Growth",
 "ticket_min": 2500000,
 "ticket_max": 10000000,
 "geography": "India",
 "status": "open",
 "visibility": "all_verified",
 "priority_flag": true,
 "teaser_doc_id": "665f1ae3f9a91c0001bcfdc7",
 "collateral_docs": ["665f1ae3f9a91c0001bcfdc8", "665f1ae3f9a91c0001bcfdc9"],
 "created_at": "2025-04-20T08:00:00Z",
 "published_at": "2025-04-22T10:00:00Z",
 "created_by": "admin_001",
 "assigned_to": null,
 "crm_deal_code": "ZOHO-INV-2025-44"
}
Related Collections
Related Collection Relationship
documents One-to-many
eoi_submissions One-to-many
investors Many-to-many via activity
This schema is the backbone of the investor interaction lifecycle and must support rapid
querying, full auditability, and dynamic field-driven rendering in the frontend.
Equigini – Software Requirements Specification Document
Page 68 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
7.3 MongoDB Schemas- NDA/TOC Document Management
This schema defines how the platform stores, tracks, and manages all signed legal documents
including Non-Disclosure Agreements (NDAs) and Term Sheets or TOCs (Terms of
Commitment). These documents are generated dynamically using investor profile fields,
digitally signed via DocuSign, and archived in a version-controlled structure for audit and
regulatory compliance.
Each document entry is uniquely identified, linked to the relevant investor and deal, and
version-tagged where applicable. All documents are stored securely and are accessible only to
authorized roles.
Collection Name: documents
Schema Fields
Field Type Required Description
_id ObjectId Yes Unique document ID
type Enum Yes nda, loi, toc, teaser, im, financials, deck,
etc.
deal_id ObjectId No (Required for deal
documents)
Link to deals collection
investor_id ObjectId No (Required for signed legal
documents)
Link to investors collection
filename String Yes Name of the file as stored or
downloaded
url String Yes CDN or S3 path to document
status Enum Yes pending, signed, archived
version Number No Version number for overwritten legal
documents
signed_at Date No Timestamp of signature completion (if
applicable)
uploaded_by ObjectId Yes Admin or analyst who uploaded the
document
signature_request_id String No Reference to DocuSign request/session
ID
created_at Date Yes Timestamp of file creation/upload
updated_at Date Yes Timestamp of last modification
Equigini – Software Requirements Specification Document
Page 69 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Usage Rules by Type
Document Type Required? Linked To Access Control
nda Mandatory for all verified
investors
investor_id Investor + Admin only
toc / loi Optional (post-EOI) investor_id +
deal_id
Investor (assigned) + Analyst
teaser Mandatory per deal deal_id Public (logged-in investors)
im, deck,
financials
Required for full access deal_id Verified investors (post-NDA
only)
Example Document Object
{
 "_id": "666201a291acaa001fb9c31f",
 "type": "nda",
 "deal_id": null,
 "investor_id": "665f5b9fc257fd001fcf1a7e",
 "filename": "NDA-AdityaSharma-Apr2025.pdf",
 "url": "https://cdn.equigini.com/legal/NDA-AdityaSharma-Apr2025.pdf",
 "status": "signed",
 "version": 1,
 "signed_at": "2025-04-20T11:45:00Z",
 "uploaded_by": "admin_001",
 "signature_request_id": "docusign-session-1129938",
 "created_at": "2025-04-20T11:30:00Z",
 "updated_at": "2025-04-20T11:45:00Z"
}
Equigini – Software Requirements Specification Document
Page 70 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Document Generation and Workflow
Step System Action
1 Investor requests NDA via UI or is prompted upon deal access
2 System generates dynamic NDA using template + investor fields (name, email, address)
3 Sends NDA for digital signature via DocuSign API
4 On signature completion, webhook updates document status to signed and stores
signed file URL
5 Signed document is made visible in investor dashboard and admin panel
6 Analyst uses same mechanism to generate and track TOC/LOI based on deal interest
Webhook Support (DocuSign)
Webhook Event Action
document.signed Marks document status as signed, logs timestamp, and saves file
reference
document.failed Flags status as failed with error metadata (optional)
Access & Permissions
Role Access Type
Investor Can view their own signed NDAs, TOCs/LOIs
Admin Full visibility and ability to re-issue or archive
Analyst View TOCs/LOIs linked to assigned deals only
Indexes and Constraints
Index Purpose
investor_id + type Retrieve all legal docs per investor
deal_id + type Retrieve collateral per deal
status For queueing or flagging pending signatures
This schema supports full legal traceability and dynamic generation workflows required for
regulated investment handling. It integrates directly with the signature platform (DocuSign) and
powers downstream access control and investor-deal workflows.
Equigini – Software Requirements Specification Document
Page 71 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
7.4 Document Versioning and Recovery
The Document Access Logs schema tracks every instance where an investor views or downloads
any document on the Equigini platform. This logging is critical for audit compliance, behavioral
analytics, CRM syncing, and triggering downstream workflows (such as follow-up emails, alerts,
or RM interventions).
Each log entry captures who accessed which document, from what IP address, and under what
context (view vs. download). These logs are immutable and stored in a dedicated collection for
legal and operational traceability.
Collection Name: document_access_logs
Schema Fields
Field Type Required Description
_id ObjectId Yes Unique log entry ID
document_id ObjectId Yes Reference to the document accessed (documents
collection)
investor_id ObjectId Yes Reference to the accessing investor
deal_id ObjectId No Reference to the deal (nullable for general legal
documents like NDAs)
access_type Enum Yes view, download, preview, denied
accessed_at Date Yes Timestamp of access
ip_address String No IP address of the investor session (optional but
recommended)
user_agent String No Browser or device string for audit context
nda_status_at_time Boolean Yes Whether investor had signed the NDA at the time of
access
referrer String No Optional source page or module (e.g., dashboard, deal
view)
Equigini – Software Requirements Specification Document
Page 72 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Example Log Entry
{
 "_id": "666233abe91d57001fe131ef",
 "document_id": "665f1ae3f9a91c0001bcfdc8",
 "investor_id": "665f5b9fc257fd001fcf1a7e",
 "deal_id": "665f1a7d1b4c234acda1289b",
 "access_type": "download",
 "accessed_at": "2025-04-22T09:18:00Z",
 "ip_address": "103.234.112.98",
 "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
 "nda_status_at_time": true,
 "referrer": "deal_detail_view"
}
Tracked Events
Event Triggers Log Entry
Document View Investor opens a document in the viewer modal or preview iframe
Document Download Investor clicks “Download” on any eligible file
Denied Attempt Unverified investor tries to access a restricted file (status: denied)
Business Rules
Rule
Code
Description
LOG-01 All document accesses must generate a log entry, regardless of success
LOG-02 Access type download must only occur if NDA is signed and access is permitted
LOG-03 Logs must be immutable; no deletions or updates allowed post-write
LOG-04 Admin and Analyst views may be optionally excluded from logging or separately
tagged
LOG-05 Logs must be queryable by date range, investor, or document ID for dashboard
analytics
Equigini – Software Requirements Specification Document
Page 73 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Indexing Strategy
Index Purpose
document_id + access_type Track document-level engagement
investor_id + accessed_at Investor activity over time
deal_id Filter logs for a specific deal
access_type + accessed_at Aggregate usage reporting (e.g., download rate trends)
Access Permissions
Role Access Type
Admin Full access via backend dashboard
Analyst View logs for documents linked to assigned deals
Investor No access to logs (invisible from frontend)
Log Usage Scenarios
• Security & Compliance: Confirm that legal documents were accessed only after NDA
• CRM Sync: Trigger updates in Zoho when an investor engages with key documents
• Investor Activity Heatmaps: Used for behavioral dashboards and nudges
• Dispute Resolution: Proof of access/download at a specific date and time
This schema ensures that the platform maintains a compliant, fully observable document
interaction history for every investor-deal-document intersection.
Equigini – Software Requirements Specification Document
Page 74 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
8. API Design & Webhooks
The Equigini platform operates on a RESTful API-first architecture. This ensures modular,
scalable, and secure communication between the frontend applications (app.equigini.com,
backend.equigini.com) and backend services. The API layer also supports integrations with
third-party services (e.g., Zoho CRM, Mailchimp, DocuSign) through webhook endpoints.
All APIs follow consistent route conventions, JSON response structures, and enforce role-based
access. Authentication is handled via OAuth2-compatible JWT-based access tokens. All
endpoints are rate-limited and secured via HTTPS.
8.1 Authentication APIs (OAuth2, JWT)
Method Endpoint Description
POST /api/auth/login Authenticate user and return JWT
POST /api/auth/register Create new investor account
GET /api/auth/verify-email/:token Email verification callback
POST /api/auth/refresh-token Refresh expired token
POST /api/auth/logout Invalidate session token
Token Format
• JWT payload includes: user_id, role, status, nda_signed, iat, exp
8.2 Investor CRUD APIs
Method Endpoint Description
GET /api/admin/investors Fetch paginated list of all investors
GET /api/investors/:id Retrieve profile data (admin/owner only)
PUT /api/investors/:id Update profile fields (admin-controlled)
POST /api/admin/investors/:id/verify Mark investor as verified
DELETE /api/admin/investors/:id Deactivate investor (soft delete)
Equigini – Software Requirements Specification Document
Page 75 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
8.3 Deal Listing & Filtering APIs
Method Endpoint Description
GET /api/deals Fetch paginated list of visible deals with filters
GET /api/deals/:slug Fetch a specific deal's metadata and content
POST /api/admin/deals Create a new deal (admin only)
PUT /api/admin/deals/:id Update deal metadata
GET /api/admin/deals/:id/activity Admin view of investor interactions
GET /api/deals/filters Get dynamic filters (sectors, stages, ticket range) for
UI dropdowns
8.4 NDA / EOI Handling APIs
Method Endpoint Description
POST /api/investors/:id/nda/request Trigger NDA signing process via DocuSign
POST /api/webhooks/nda-complete Webhook from DocuSign on NDA completion
POST /api/deals/:id/eoi Submit an Expression of Interest
GET /api/admin/eois Admin view of all EOIs (with filters)
POST /api/admin/eois/:id/assign Assign EOI to analyst (triggers notification)
8.5 Dashboard & Analytics Data APIs
Method Endpoint Description
GET /api/admin/analytics/overview KPI overview (DAU, MAU, EOI conversion)
GET /api/admin/analytics/investor/:id Individual investor activity log
GET /api/admin/analytics/deal/:id Deal performance analytics
GET /api/admin/analytics/events Filtered interaction logs (clicks, document
views)
GET /api/admin/analytics/exports Generate downloadable CSV reports
Equigini – Software Requirements Specification Document
Page 76 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
8.6 Webhook Architecture
The Equigini backend exposes secure endpoints to support real-time integration with third-party
platforms including Zoho CRM, DocuSign, and Mailchimp. All webhook endpoints are
authenticated via secret headers and require whitelisting.
8.6.1 Investor Signup Webhook
| Endpoint | /api/webhooks/investor/signup | | Method | POST | | Trigger | On successful
investor registration | | Payload |
{
 "investor_id": "6645bfa9...",
 "full_name": "Aditya Sharma",
 "email": "aditya@example.com",
 "created_at": "2025-04-22T10:30:00Z"
}
| Target | Zoho CRM (new lead entry), Mailchimp (onboarding campaign) |
8.6.2 EOI Submitted Webhook
| Endpoint | /api/webhooks/eoi/submitted | | Method | POST | | Trigger | When investor
submits an EOI | | Payload |
{
 "investor_id": "6645bfa9...",
 "deal_id": "665f1a7d...",
 "eoi_id": "6681d4...",
 "ticket_size": 5000000,
 "submitted_at": "2025-04-22T11:15:00Z"
}
| Target | Zoho CRM (deal stage update), Mailchimp (alert or follow-up) |
Equigini – Software Requirements Specification Document
Page 77 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
8.6.3 Deal Updated Webhook
| Endpoint | /api/webhooks/deal/updated | | Method | POST | | Trigger | When a deal is
published, updated, or closed | | Payload |
{
 "deal_id": "665f1a7d...",
 "title": "Series A - ZappyPay",
 "status": "closed",
 "updated_at": "2025-04-22T12:00:00Z"
}
| Target | CRM deal pipeline, internal dashboards |
8.6.4 Document Viewed/Downloaded Webhook
| Endpoint | /api/webhooks/document/access | | Method | POST | | Trigger | On
view/download of any legal or investment document | | Payload |
{
 "document_id": "665f1ae3...",
 "investor_id": "6645bfa9...",
 "access_type": "download",
 "timestamp": "2025-04-22T12:15:00Z"
}
| Target | CRM activity log (Zoho), Admin notification queue |
8.6.5 CRM Integration Hooks
Purpose Description
new_investor Create/update lead in Zoho with status: pending_approval
nda_completed Update investor status to verified in CRM
eoi_received Push deal-specific interest data to CRM for analyst handoff
deal_activity Push engagement history logs to CRM timeline (view/download/EOI)
This API and webhook structure ensures full modularity, external system sync, and auditability
across key investor-deal interactions. It supports the platform’s extensibility and
CRM/automation integration backbone.
Equigini – Software Requirements Specification Document
Page 78 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
9. Legal & Compliance Workflow
Equigini’s legal infrastructure is designed to ensure that all deal-related documents and investor
agreements are executed and stored in a manner compliant with Indian regulatory norms and
institutional governance practices. This includes automated generation, digital signing, versioncontrolled archiving, and role-based access control for all legal workflows.
The system integrates with DocuSign (or optionally Leegality in the future) to enable seamless
e-signature flows for NDAs, LOIs, and TOCs. All signed documents are stored securely, linked to
the respective investor and deal, and made retrievable through an immutable audit trail and
recovery protocol.
9.1 NDA Automation with DocuSign
The NDA is the prerequisite for any investor to gain access to restricted deal documents. It must
be dynamically generated from a predefined legal template, prefilled with investor details, and
digitally signed via DocuSign.
Step Action
1 Investor clicks “Sign NDA” on frontend after verification
2 System generates dynamic NDA using pre-approved template with autofilled fields
(name, email, address)
3 DocuSign API is triggered to create and send a signing session
4 Upon successful signing, DocuSign triggers webhook to update document status and
save signed PDF URL
5 Access is then granted to restricted documents within deal rooms
Fields Auto-Populated in NDA Template
Field Source
Full Name Investor profile
Email Investor profile
PAN (optional) Investor profile
Address Investor profile (required fields)
Signing Date Timestamp at execution
API Endpoints Involved
• POST /api/investors/:id/nda/request
• POST /api/webhooks/nda-complete
• GET /api/investors/:id/nda/status
Equigini – Software Requirements Specification Document
Page 79 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
9.2 TOC Signing and Archiving
The Term of Commitment (TOC) or Letter of Intent (LOI) is initiated post-EOI and defines
investor interest in a specific deal. It is generated and managed by the assigned analyst, and the
signed versions are archived within the documents collection.
Step Action
1 Admin/analyst initiates TOC generation for an investor-deal pair
2 System uses pre-approved TOC template, autofilled with investment details and
investor information
3 DocuSign session is created and shared with the investor
4 Signed TOC is logged, versioned, and archived in the backend
5 Admin and analyst are notified of completion and deal progresses offline from this
stage
Fields Auto-Populated
Field Source
Investor Details Profile
Deal Title deals collection
Ticket Size (Optional) Captured in EOI
TOC Version Auto-incremented on update
Analyst Name System-generated or entered manually
9.3 Audit Trail and Role-Based Permissions
All document actions are tracked in real-time using immutable logs to create a full audit trail of
legal document events (initiation, viewing, download, signing).
Event Type Tracked
Document Generation Yes
Signature Request Sent Yes
Document Viewed Yes (with IP, timestamp)
Document Signed Yes
Document Archived Yes
Roles and Permissions
Role Access
Investor Can only view/download signed NDAs and deal-specific TOCs
Admin Full access to generate, resend, archive, and retrieve legal documents
Analyst View and generate TOCs for assigned deals; cannot edit NDA template
Audit logs are stored in document_access_logs and all documents are tagged with created_by,
signed_by, and signed_at.
Equigini – Software Requirements Specification Document
Page 80 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
9.4 Legal Document Recovery Protocol
To ensure reliability, all legal documents must be version-controlled and recoverable in case of
system or user error.
Layer Recovery Mechanism
File Storage Signed PDFs stored in a cloud bucket (e.g., S3) with secure URLs
Version
Control
Document versions tracked via version field in documents collection
Retrieval Logs Access to older versions retained with archived_at timestamp
Redundancy Signed files backed up to internal storage or third-party (DocuSign cloud
vault)
Restoration Admin panel to “restore previous version” with audit log entry required
Business Rules
• No overwrite of signed documents; newer versions are appended with version + 1
• Archived documents remain available via admin interface with visual version history
• Recovery requires admin access and reason logging
This legal and compliance workflow ensures Equigini maintains the highest standards of
traceability, auditability, and investor confidentiality throughout the investment lifecycle.
Equigini – Software Requirements Specification Document
Page 81 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
10. Mobile Responsiveness & UX Design
The Equigini platform is designed with a mobile-first philosophy to ensure accessibility and
usability for investors accessing the platform via smartphones, tablets, or lower-resolution
screens. Given the high likelihood of mobile usage by HNIs and angel investors on-the-go,
responsive UI and adaptive interaction standards are critical to platform adoption and
engagement.
The platform UI must be developed using responsive utility-first CSS (Tailwind) and
component-driven design patterns (React), with adaptive rendering for all major user modules
— including dashboards, deal listings, document access, and profile management.
10.1 UI/UX Principles
The design framework must follow industry-standard UX principles tailored to fintech and
investment platforms, prioritizing clarity, hierarchy, and ease of navigation.
Principle Implementation
Mobile-First Design All pages and components should be optimized for screens ≤ 768px
before scaling to larger breakpoints
Minimal Click Depth Most important user actions (e.g., view deal, sign NDA, submit EOI)
should be accessible within 2 taps from the home screen
Component
Consistency
Reusable components (buttons, cards, modals, tabs) should maintain
consistent behavior across screens
Progressive
Disclosure
Content should be displayed in collapsible or swipeable layers (e.g.,
teaser → summary → full detail)
Accessibility Use semantic HTML, proper color contrast, alt tags, focus rings, and
screen reader compatibility for all interactive elements
Feedback & State
Awareness
All actions must show real-time feedback (loading, success, error), and
inactive states must be clearly indicated
Equigini – Software Requirements Specification Document
Page 82 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
10.2 Mobile-first Wireframes
The UI must support responsive rendering for the following key screens:
Screen Responsive Behavior
Home / Dashboard Collapsible deal feed with swipeable horizontal filters; featured
section at top
Deal List View Vertical scroll with teaser + basic metadata; tags rendered as pills
Deal Detail View Tabs or accordion-based detail sections (e.g., Summary, Documents,
EOI)
Document Room View/download buttons rendered as large tappable elements;
watermark overlays must be mobile-friendly
EOI Form Single-scroll form layout with grouped fields; confirmation animation
on submit
Profile / Settings Form fields stacked vertically with mobile input types (e.g., tel,
email, number)
Admin Mobile View
(optional)
Basic view-only panels for approvals and EOI status; upload/edit
remains desktop-centric
10.3 Swipe and Interaction Standards
All mobile touch interactions must follow common usability heuristics for performance and
intuitiveness.
Interaction Standard
Horizontal
Swipes
Used in deal filter chips, carousel-like banner sections
Vertical
Scrolling
Default for feed-based components (deal list, blogs, dashboards)
Accordion /
Collapse
Used for structured information sections within deal details, NDA, and TOC
content
Sticky CTA
Buttons
Key actions like “Sign NDA”, “Express Interest”, or “Submit EOI” must be
fixed at the bottom of viewport on small screens
Touch Targets All buttons and inputs must follow a 44x44px minimum tap target size
Input Types Ensure proper keyboard rendering using HTML5 input types (e.g., number,
email, tel)
Transitions Use subtle animations for page transitions, dropdowns, and loading to
preserve perceived performance
These mobile and UX specifications ensure that Equigini delivers a seamless, on-brand, and
intuitive experience to investors across devices, while maintaining full functionality of legal,
investment, and compliance workflows.
Equigini – Software Requirements Specification Document
Page 83 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
11. Analytics & Monitoring
The Equigini platform must be fully instrumented with an end-to-end analytics system to track
user behavior, deal engagement, investor funnel progression, and document access patterns.
This visibility is critical for internal decision-making, optimization of investor activation flows,
prioritization of platform enhancements, and marketing ROI measurement.
The analytics layer will include Google Analytics 4 (GA4) for event-based tracking, Hotjar or
Microsoft Clarity for behavioral heatmaps, custom funnel logic for drop-off diagnostics, and a
role-restricted admin monitoring dashboard for KPI reporting. Additionally, all meaningful
investor actions will be pushed to Zoho CRM as part of centralized engagement tracking.
11.1 Google Analytics 4 Tracking
GA4 must be integrated via Google Tag Manager (GTM) and used as the primary analytics
backend for tracking user interactions on both the public site and investor platform
(equigini.com, app.equigini.com).
Component Implementation
GTM Container ID Embedded into <head> of all public pages
GA4 Measurement
ID
Configured via GTM
Data Layer Events dataLayer.push() used for all key interaction points
Consent Logic Cookie-based consent capture; analytics only enabled post opt-in
Session Attribution UTM tracking and pageview referrers must be passed with
signups/EOIs
Tracked Events (Sample)
Event Name Trigger
page_view On load or route change
cta_click Click on “Sign NDA”, “Express Interest”, “View Deal”
nda_signed On successful NDA webhook trigger
eoi_submitted On EOI form submission
document_downloaded On IM/Pitch Deck download
blog_read On 50% scroll of blog content
All events must include context metadata such as investor_id (if logged in), deal_id, source,
device_type, and timestamp.
Equigini – Software Requirements Specification Document
Page 84 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
11.2 Funnel Drop-Off & Event Tagging
Funnel tracking is required to monitor where investors disengage or fail to complete key actions
(e.g., registration → NDA → EOI → TOC). This must be powered by backend-synced event logs
(e.g., logins, pageviews, submissions) and exposed via API endpoints for internal dashboards.
Funnel Stage Expected Action
Visit → Registration /api/auth/register success
Registration → Email Verified /api/auth/verify-email event
Email Verified → NDA Signed DocuSign webhook + frontend success trigger
NDA Signed → Deal Viewed /api/deals/:slug access logged
Deal Viewed → EOI Submitted /api/deals/:id/eoi submission
EOI → TOC Signed DocuSign webhook for TOC (if triggered)
Each drop-off must be logged with:
• User ID
• Funnel stage exited at
• Time since previous step
• Device and session metadata
This data is aggregated and visualized via admin dashboards (see 11.4) for conversion
optimization.
11.3 Hotjar / Microsoft Clarity Heatmaps
Behavioral heatmapping tools like Hotjar or Microsoft Clarity must be embedded for non-PII
visual analysis of investor activity. This includes scroll depth, click frequency, hesitation, and
rage clicks on high-friction pages.
Tool Function
Hotjar / Clarity Record anonymous user sessions
Heatmaps Show scrolling, tap zones, form abandonments
Session Replay Replay navigation patterns for insight into confusion or drop-offs
Equigini – Software Requirements Specification Document
Page 85 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Target Pages for Heatmaps
Page Purpose
Investor Dashboard Observe document navigation flow
Deal Detail View Identify CTA placement effectiveness
EOI Form Measure field-level drop-offs
NDA Signing Prompt Assess sign-up-to-sign flow confusion
Blog Page See which content drives most engagement
These tools are read-only for internal optimization and must avoid capturing sensitive data. IP
masking and cookie consent are mandatory for privacy compliance.
11.4 Admin Monitoring Dashboard
A real-time dashboard accessible only to admin users must display core platform KPIs, funnel
metrics, and behavioral summaries. This dashboard should be implemented as a standalone
frontend module connected to analytics API endpoints.
Metrics Displayed
Category KPI
Platform Usage DAU, MAU, bounce rate, avg. session duration
Investor Funnel Signup → Verified → NDA → EOI conversion %
Deal Engagement Views per deal, document downloads, top-performing deals
Document Access NDA/TOC completion rate, IM downloads
Blog Traffic Top-performing posts, scroll %
Dashboard Features
• Graphs: Line/bar charts by week, month, segment
• Filters: Investor type, geography, deal sector
• Export: CSV or PDF downloads for internal reviews
• Drill-Downs: Investor-level activity views
All data should be sourced from a dedicated analytics microservice or MongoDB aggregate
pipelines, not GA directly.
Equigini – Software Requirements Specification Document
Page 86 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
11.5 CRM Integration Metrics (Zoho)
All tracked investor interactions must be mirrored in Zoho CRM to support lead nurturing,
analyst prioritization, and relationship management.
CRM Activity Trigger
Lead Created On successful registration
Lead Qualified On admin verification
NDA Signed On DocuSign webhook
EOI Submitted On /eoi form submission
Document Accessed From document_access_logs
TOC Sent / Signed On TOC webhook
These events are logged into the CRM timeline and used for internal scoring, task assignments,
and nurturing sequences.
Payload Fields Synced
• Investor ID (internal + Zoho)
• Deal ID (if applicable)
• Activity Type (view, submit, sign, etc.)
• Timestamp
• Source (platform, campaign)
This two-way sync ensures CRM is a true extension of platform activity and not siloed from
behavioral signals.
Equigini – Software Requirements Specification Document
Page 87 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
12. Non-Functional Requirements
This section outlines the system-wide constraints and technical quality standards that the
Equigini platform must meet. These non-functional requirements ensure that the platform is
scalable, secure, resilient, compatible across environments, and accessible to all eligible users.
They complement the functional architecture by defining measurable operational criteria that
apply uniformly across all modules.
12.1 Performance & Scalability
The system must maintain consistent performance under normal and peak usage conditions. As
investor and deal volume grows, the infrastructure must support horizontal scaling without
rearchitecting core modules.
Metric Target
API Response Time ≤ 500ms for standard operations
Page Load Time ≤ 1 second for 90% of frontend routes
Concurrent Users 2,000+ concurrent sessions without degradation
Document Download Speed ≤ 2 seconds for 90% of file loads (≤ 10MB)
Search/Filter Latency ≤ 750ms per query across indexed fields
Horizontal Scalability Stateless services deployed behind load balancers
Rate Limiting Configurable per API route (default: 60 req/min/user)
Backend performance must be monitored via APM tools (e.g., New Relic, CloudWatch, or
custom logging) and alerts configured for latency or error thresholds.
12.2 Security & Data Protection
Given the sensitivity of user data, financial documents, and legally binding contracts, security
must be enforced at all layers of the stack.
Area Requirements
Authentication JWT with role validation; session expiry and refresh tokens
Data Encryption HTTPS (TLS 1.2+) on all network traffic; AES-256 encryption at rest for
documents
Document Access Role-based + NDA-state logic enforced at API and UI levels
Input Validation Server-side validation on all APIs using schemas (Zod, Pydantic, Joi)
Secure Headers Content Security Policy (CSP), X-Content-Type, X-Frame-Options, etc.
Database Access IP-restricted, credential-rotated, no direct DB exposure to frontend
Credential
Management
All secrets stored in secure .env and encrypted using AWS Secrets
Manager or equivalent
Penetration Testing To be scheduled before public launch and annually thereafter
Equigini – Software Requirements Specification Document
Page 88 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
12.3 Backup and Recovery
The platform must be resilient to data loss, corruption, and infrastructure outages through
proactive backup and recovery strategies.
Component Backup Frequency Retention
MongoDB Daily incremental, weekly full 30-day history
Uploaded Documents S3 versioning enabled Retain last 5
versions
Deployment Artifacts GitHub-based version control All commits retained
Legal Documents Version-controlled, never
overwritten
Indefinite
Restore Time Objective (RTO) ≤ 4 hours
Recovery Point Objective
(RPO)
≤ 24 hours
Backup scripts must be tested quarterly. Admin interface will include logs of last successful
backup and next scheduled job.
12.4 Compatibility
The platform must function seamlessly across commonly used devices, browsers, and screen
sizes.
Dimension Requirement
Browsers Latest 3 versions of Chrome, Firefox, Safari, Edge
Mobile Fully responsive (min 320px width); iOS Safari, Android Chrome
OS Compatibility Windows 10+, macOS 11+, iOS 14+, Android 11+
Document
Viewers
PDF viewer must work across browsers without requiring 3rd-party
plugins
Screen Readers Support for ARIA roles and assistive technologies
Compatibility testing must be incorporated in the QA workflow and automated where feasible
using cross-browser testing tools.
Equigini – Software Requirements Specification Document
Page 89 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
12.5 Usability & Accessibility
The platform must provide a professional, intuitive experience for all users, including those with
accessibility needs.
Usability Feature Requirement
Navigation Clear page hierarchy with breadcrumb support
CTA Consistency All actions (e.g., “Sign NDA”, “Submit EOI”) must be persistent and
easily tappable
Error Messaging Clear, actionable messages for all failures, form validations, and
permission issues
Onboarding
Experience
Guided flows for first-time investors, tooltips for key actions
WCAG Compliance Target WCAG 2.1 Level AA minimum for color contrast, font size,
keyboard nav
Focus Management Tab-index, skip-to-content links, modal focus traps required
Language English (EN-IN) — other languages not in scope of MVP but supported
by framework structure
Periodic usability testing should be conducted with target users (HNWIs, analysts) to refine
interactions and UX flows.
These non-functional requirements ensure that Equigini is robust, compliant, and investor-ready
from both a technical and operational standpoint.
Equigini – Software Requirements Specification Document
Page 90 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
13. Development, Deployment & CI/CD
To ensure consistency, traceability, and efficiency across all engineering workflows, Equigini
must follow a structured development and deployment lifecycle. This includes strict source
control governance, automated build pipelines, isolated environments for staging and
production, and real-time logging for observability.
The codebase will be version-controlled via GitHub, and deployments will be automated using
CI/CD pipelines configured for code linting, testing, environment injection, and zero-downtime
delivery to production servers hosted on AWS or Vercel.
13.1 GitHub Repository Structure
A mono-repo structure is recommended for maintainability, with directory-level separation of
services (frontend, backend, automation scripts).
Proposed Repo Structure:
/equigini/
├── /frontend/ → React + Tailwind frontend (user and admin UI)
├── /backend/ → Node.js/Flask API services
├── /scripts/ → Scheduled jobs (sitemap, backup, notifications)
├── /webhooks/ → External service listeners (DocuSign, Mailchimp)
├── /docs/ → Swagger/OpenAPI specs, architecture diagrams
├── .github/ → GitHub Actions workflows
├── .env.example → Environment variable template
├── docker-compose.yml → Multi-service dev container setup (optional)
└── README.md
Access Control:
• Master branch: Protected (admin-only merges)
• Dev branches: Open for peer-reviewed pull requests
• Environments: Separate .env.staging, .env.prod with secrets management
Equigini – Software Requirements Specification Document
Page 91 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
13.2 CI/CD Pipeline
The CI/CD pipeline automates the full development lifecycle — from build and test to staging
and production deployments. Pipelines will be built using GitHub Actions or GitLab CI and
integrated with the deployment target (AWS EC2, Vercel, or Docker-based environments).
CI (Continuous Integration) Pipeline:
Stage Description
Code Checkout Pull source from GitHub
Linting Enforce coding style (eslint, prettier, black)
Unit Tests Run backend and frontend test suites (Jest/PyTest)
Build Compile React frontend and backend API containers
Artifact Packaging Output deployable ZIP or Docker image
CD (Continuous Deployment) Pipeline:
Stage Description
Staging Deploy Push build to staging server on develop merge
Production Deploy Triggered manually or by tag on main branch
Env Injection Auto-load environment variables from GitHub secrets
Rollback Option Deploy previous successful build from CI history
Post-Deploy Hooks Trigger scripts (e.g., sitemap update, error tracking ping)
Tools Used:
• GitHub Actions
• AWS CLI + EC2/Elastic Beanstalk (optional: Vercel for frontend)
• Docker (optional)
• Slack / Email Notifications for build status
Equigini – Software Requirements Specification Document
Page 92 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
13.3 Branching Strategy
A standardized Git workflow will be used to coordinate contributions across devs and manage
feature releases efficiently.
Branch Types:
Branch Purpose
main Stable production-ready code (only CI-verified merges allowed)
develop Staging branch for new feature integration
feature/<name> Isolated branch for feature development
hotfix/<issue> Immediate production patches
release/<tag> Pre-production release freeze (optional for large deployments)
Workflow:
1. Developer creates feature/... branch off develop
2. Pull Request (PR) raised → Reviewed → Merged into develop
3. CI pipeline builds and deploys to staging
4. develop merged into main for production release
5. Tags (v1.0.0) used to version releases
13.4 Server Deployment & Logs
The production and staging environments will be hosted on AWS EC2 (preferred) or Vercel (for
frontend only), with continuous deployment from GitHub and centralized log collection.
Deployment Environments:
Env Purpose Domain
Staging Internal QA & UAT staging.equigini.com
Production Live investor & admin use app.equigini.com, backend.equigini.com
Deployment Stack:
Component Tool
Frontend Vercel (auto-deploy on push to main) or EC2 with NGINX
Backend Node.js or Flask app hosted on EC2
Reverse Proxy NGINX with HTTPS (ACM or Let's Encrypt)
Database MongoDB Atlas or EC2-hosted replica set
Static Files S3 with Cloudflare CDN
Logs CloudWatch or Papertrail / LogDNA with structured JSON logs
Equigini – Software Requirements Specification Document
Page 93 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Log Streams Captured:
Stream Description
API Logs Request logs with response codes, auth failures, access violations
Document Events Access/download/view logs (linked to document_access_logs)
Auth Logs Logins, password resets, role changes
Deployment Logs Build + post-deploy script outputs
Cron Jobs Backup, sitemap, analytics rollup tasks
Monitoring & Alerts:
• Uptime checks via CloudWatch or UptimeRobot
• Build failure notifications via Slack or email
• Error logs reviewed weekly by tech lead
This infrastructure enables a modern development lifecycle that is automated, secure, and
scalable, while giving the internal team full visibility and control over every release.
Equigini – Software Requirements Specification Document
Page 94 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
14. Testing Strategy
The testing strategy for the Equigini platform is designed to ensure functional correctness,
system reliability, platform compatibility, and performance stability across all modules. The
strategy spans automated testing, manual UAT, cross-platform validation, and scalability
benchmarks — applied throughout the development lifecycle, CI/CD pipeline, and pre-launch
verification stages.
All test cases and outcomes must be documented and maintained in a test case management
system or GitHub issues board with version-tagged logs.
14.1 Unit Testing
Unit testing focuses on verifying the correctness of individual functions, services, and
components in isolation within the frontend and backend codebase.
Layer Tool Coverage Areas
Frontend (React) Jest + React Testing
Library
Components (e.g., forms, modals), hooks,
logic utils
Backend
(Node/Flask)
Jest (Node) / PyTest
(Flask)
API routes, business logic, validation rules
Scripts Node Test/Unittest Sitemap, backup, webhooks
Coverage Goals
Metric Target
Critical Modules 100%
Overall Codebase ≥ 80%
Failed Builds Blocked from deploy on main branch
Tests must be runnable via CI pipeline and locally. Test suites should be isolated (mocked DB/API
responses) and idempotent.
Equigini – Software Requirements Specification Document
Page 95 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
14.2 Integration Testing
Integration testing validates the interactions between multiple services/modules — such as API
endpoints interacting with the database, or frontend forms triggering backend workflows.
Scenario Example
Investor Signup → Email Verification
→ CRM Push
Confirms end-to-end user creation
NDA Signing Flow Investor action → DocuSign → Webhook response →
Document created
Deal Upload → Visibility in Frontend Admin uploads deal → Appears in investor
dashboard
Document Access Control Verified investor downloads IM only post NDA
signature
Tooling
• Postman Collections (for API validation)
• Supertest (Node backend integration)
• Mocking tools for DocuSign, Mailchimp, and Zoho webhook simulations
Tests must run against staging environment or a CI-spun test instance using a seeded test DB.
Equigini – Software Requirements Specification Document
Page 96 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
14.3 UAT Process (User Acceptance Testing)
UAT ensures that the platform behaves as expected under real-world user scenarios and meets
all defined acceptance criteria before launch.
Stage Action
1 Internal teams (Analyst, Admin, VP-IB) create accounts and simulate investor
workflows
2 Verified investors (test users) complete NDA, access deals, submit EOIs
3 Analysts process EOIs, generate TOCs
4 Admin exports reports, checks logs, reviews funnel metrics
Test Scenarios to Cover
• Mobile NDA signing and access control
• Full EOI and document viewing workflows
• Document generation templates (NDA, TOC) rendering properly
• Admin dashboards (approvals, uploads, analytics)
• Access permissions across user roles
All feedback from UAT is tracked in a change log and assigned as bug fixes or enhancements
before production release.
14.4 Performance Testing
Performance testing ensures that the system can handle load, concurrency, and response
expectations during traffic spikes or batch document actions.
Test Type Description
Load Testing Simulate concurrent logins, deal views, document downloads
API Stress Testing Push endpoint usage to limits (EOI submission, filtering, deal access)
Database Stress Assess MongoDB read/write latency under 1,000+ concurrent users
Document Delivery Measure time to download/view PDFs from CDN/S3 under load
Tools Used
• Artillery.io or Locust (for load testing APIs)
• Lighthouse / WebPageTest (for frontend performance)
• MongoDB Profiler or Atlas metrics dashboard
Equigini – Software Requirements Specification Document
Page 97 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Thresholds
Metric Target
P95 Response Time ≤ 750ms (API)
Page Load ≤ 500ms (95% of users)
Concurrent Investors Supported ≥ 2,000+ active sessions
14.5 Mobile and Cross-Browser Testing
Cross-device and browser testing validates that the platform performs consistently across
environments used by HNWIs, angel investors, and analysts.
Dimension Requirement
Screen Sizes Mobile (320–480px), Tablet (768px), Desktop (≥1024px)
Devices iOS (Safari), Android (Chrome), Windows/macOS (Chrome, Edge, Firefox,
Safari)
OS
Compatibility
iOS 14+, Android 11+, Windows 10+, macOS 11+
Accessibility Keyboard nav, screen readers, contrast compliance
Tools Used
• BrowserStack / LambdaTest (manual + automated suites)
• Axe (for WCAG testing)
• Manual device matrix with regression checklist
Areas to Validate
• Responsive deal cards, dashboards, and forms
• Document preview and download on mobile
• Touch vs. click interaction patterns
• Sticky CTA buttons and swipeable navigation
• Error state and fallback messages
By following this testing strategy, Equigini ensures a stable, secure, and polished experience for
investors and internal users alike — with minimal post-deployment risk and maximum user
confidence.
Equigini – Software Requirements Specification Document
Page 98 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
15. Roadmap and Phases
The Equigini platform will be developed and delivered in a single consolidated phase. This phase
encompasses the entire scope defined in this SRS, and is structured to be completed within 30
calendar days. This includes development, integration, internal QA, UAT, and production
deployment.
All deliverables are aligned with the core platform requirements, and no future enhancements
are currently in scope.
15.1 Phase 1 – Core Platform Delivery
Total Duration: 30 Days
Goal: Deliver full investor + admin platform, integrations, document workflows, CMS, and
analytics
Teams Involved: Backend Developers, Frontend Developers, QA, DevOps, Analyst, Admin
Reviewers
Phase-Wise Work Plan
Week Key Deliverables Modules / Features Responsible Team(s)
Week 1 Environment Setup & Core
APIs
- GitHub repo setup
- MongoDB schema setup
- Auth APIs (login, register, JWT)
- Frontend base structure (React +
Tailwind)
- Admin layout
- Email verification flow
Backend, Infra,
Frontend
Week 2 Investor Flows & CMS - Investor profile form + role logic
- Deal upload module (admin)
- Deal listing & filtering API
- Blog CMS with .docx upload support
- DocuSign NDA integration
Full Stack Team
Week 3 Workflows & Webhooks - NDA signing & gated access logic
- EOI submission + admin assignment
- Document room + download access
- Document access logs schema
- Mailchimp & Zoho webhook setup
Backend + Integration
Week 4 Testing, Analytics, UAT - GA4 + Hotjar/Clarity integration
- Admin dashboard for analytics
- Sitemap generation, SEO meta inject
- Mobile responsiveness QA
- UAT review and production deployment
QA, DevOps, Tech Lead
Equigini – Software Requirements Specification Document
Page 99 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Go-Live Checklist (End of Week 4)
Area Verification Criteria
 Functionality All investor + admin flows work end-to-end
 Legal Integration NDA and TOC tested via DocuSign
 Document Security Downloads restricted by NDA status
 CRM Events All key actions syncing to Zoho
 Analytics Funnel and event tracking in GA4
 Performance Page load ≤ 2s, APIs ≤ 500ms
 Mobile Ready Works across screen sizes & OS
 SEO & Sitemap Fully functional with auto-updates
15.2 Future Enhancements
Not applicable within this 30-day delivery scope. Phase 2 modules (AI nudges, smart deal
matching, syndicate tools) may be planned post go-live.
Equigini – Software Requirements Specification Document
Page 100 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
16. Appendix
This appendix provides reference structures, response formats, mock data, and technical
mappings that supplement the primary development requirements. These materials are
intended to guide implementation, ensure consistency, and facilitate smoother developer
onboarding.
16.1 Sample NDA & TOC Templates
Status: To be provided by Pantomath Legal Team
• Legal templates will be shared in .docx format
• Variables to be dynamically populated:
o Investor Name
o Email
o Address (full)
o PAN (if applicable)
o Deal Title (for TOC)
o Signing Date
• Template upload will integrate with DocuSign for digital signing
Equigini – Software Requirements Specification Document
Page 101 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
16.2 Sitemap Structure (Post)
Below is the sitemap structure after full implementation:
https://equigini.com/sitemap.xml
├── / → Homepage
├── /about → Static page
├── /contact → Static page
├── /blog → Blog index
├── /blog/<slug> → Individual blog posts
├── /terms → Static page (Terms of Use)
├── /privacy → Static page (Privacy Policy)
├── /deals → Public listing (locked view)
Each blog post and static page will be injected automatically upon publish.
Equigini – Software Requirements Specification Document
Page 102 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
16.3 Example API Response Structures
Investor Profile (GET /api/investors/:id)
{
 "full_name": "Aditya Sharma",
 "email": "aditya@example.com",
 "status": "verified",
 "nda_signed": true,
 "preferred_sectors": ["Fintech", "CleanTech"],
 "address": {
 "line1": "10B Lotus Residency",
 "city": "Mumbai",
 "state": "Maharashtra",
 "postal_code": "400001",
 "country": "India"
 }
}
Equigini – Software Requirements Specification Document
Page 103 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
Deal Listing (GET /api/deals)
{
 "deals": [
 {
 "title": "ZappyPay Series A",
 "slug": "zappypay-series-a",
 "sector": "Fintech",
 "stage": "Growth",
 "ticket_range": { "min": 2500000, "max": 10000000 },
 "status": "open"
 }
 ]
}
Equigini – Software Requirements Specification Document
Page 104 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
16.4 Docx to JSON Conversion Sample
Sample .docx Input:
Title: 5 Trends in Private Markets
Category: Sector Insights
Tags: PE, India, VC
Slug: private-markets-trends
Meta: Key shifts in private equity strategies post-2025.
Content:
Private markets are undergoing massive transformation...
Converted JSON:
{
 "title": "5 Trends in Private Markets",
 "category": "Sector Insights",
 "tags": ["PE", "India", "VC"],
 "slug": "private-markets-trends",
 "meta_description": "Key shifts in private equity strategies post-2025.",
 "content_html": "<p>Private markets are undergoing massive transformation...</p>"
}
Equigini – Software Requirements Specification Document
Page 105 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
16.5 Investor Persona Mock Profiles
Persona Segment Key Traits
Persona 1 HNWI (Domestic) 45 years old, India-based, fintech-heavy, ₹25L–₹2Cr ticket
Persona 2 Family Office Multi-member decision process, 2–4 week evaluation cycle
Persona 3 Angel Investor Fast-moving, high-risk appetite, prefers mobile-first interface
Persona 4 Institutional Compliance-heavy, prefers structured deal rooms, bulk data access
These personas guide usability testing, onboarding flows, and content tone.
16.6 Webhook Documentation Examples
DocuSign – NDA Completion Webhook
POST /api/webhooks/nda-complete
{
 "investor_id": "6645bfa9...",
 "document_id": "665f1ae3...",
 "status": "signed",
 "signed_at": "2025-04-22T10:45:00Z"
}
EOI Submitted → Zoho CRM Webhook Payload
{
 "eoi_id": "eoi_00123",
 "investor_email": "investor@example.com",
 "deal_id": "deal_xyz001",
 "amount": 5000000,
 "timestamp": "2025-04-22T11:10:00Z"
}
These payloads should be used for configuring event listeners, CRM sync, and follow-up
automations.
--------------- End of Document ------------------
Equigini – Software Requirements Specification Document
Page 106 of 106
Copyright: Pantomath Capital Advisors Pvt. Ltd.
CONFIDENTIALITY AND INTELLECTUAL PROPERTY NOTICE
This document and all its contents are the exclusive intellectual property of Pantomath Capital Advisors
Pvt. Ltd. It has been prepared solely for internal use by authorized personnel, contractors, or development
teams associated with the Equigini project.
All technical, operational, architectural, and strategic information contained within this Software
Requirements Specification (SRS) is strictly confidential and proprietary. Unauthorized disclosure,
duplication, reproduction, transmission, or distribution—whether in whole or in part—is expressly
prohibited without prior written consent from Pantomath Capital Advisors Pvt. Ltd.
Any use of this document outside the scope of project execution, or access by individuals not explicitly
approved, will be considered a breach of confidentiality and may result in legal action in accordance with
applicable intellectual property and data protection laws.
By accepting access to this document, the recipient acknowledges and agrees to adhere to all
confidentiality and IP terms outlined herein.